<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郑君的学习笔记</title>
  <icon>https://www.gravatar.com/avatar/ef05bab8bfc24f2437b6f3e9aee9af49</icon>
  <subtitle>要比昨天进步一点点</subtitle>
  <link href="http://zhengjun.top/atom.xml" rel="self"/>
  
  <link href="http://zhengjun.top/"/>
  <updated>2022-01-26T07:38:35.987Z</updated>
  <id>http://zhengjun.top/</id>
  
  <author>
    <name>郑  君</name>
    <email>aslucky1977@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js-package managers</title>
    <link href="http://zhengjun.top/2022/01/26/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/javascript/js-package-managers/"/>
    <id>http://zhengjun.top/2022/01/26/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/javascript/js-package-managers/</id>
    <published>2022-01-26T06:39:05.000Z</published>
    <updated>2022-01-26T07:38:35.987Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js Package Manager</p><p>npm<br>Yarn<br>pnpm</p><p>npm was the first package manager to introduce the concepts of registry protocol and packaging standards. It was released back in 2010 and officially adopted by the Node.js team shortly afterward, which was the turning point for npm.</p><p>Yarn 改进了 npm 的问题</p><p>使用 yarn,管理员权限运行控制台输入下面命令</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装 corepack</span></span><br><span class="line">corepack enable</span><br><span class="line"><span class="comment">// 初始化项目</span></span><br><span class="line">yarn init -<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="Accessing-the-list-of-commands"><a href="#Accessing-the-list-of-commands" class="headerlink" title="Accessing the list of commands"></a>Accessing the list of commands</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Accessing the list of commands</span></span><br><span class="line">yarn help</span><br><span class="line"></span><br><span class="line"><span class="comment">//Starting a new project</span></span><br><span class="line">yarn init</span><br><span class="line"></span><br><span class="line"><span class="comment">//Installing all the dependencies</span></span><br><span class="line">yarn</span><br><span class="line">yarn install</span><br><span class="line"></span><br><span class="line"><span class="comment">//Adding a dependency</span></span><br><span class="line">yarn add [package]</span><br><span class="line">yarn add [package]@[version]</span><br><span class="line">yarn add [package]@[tag]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Adding a dependency to different categories of dependencies</span></span><br><span class="line">yarn add [package] --dev  # dev dependencies</span><br><span class="line">yarn add [package] --peer # peer dependencies</span><br><span class="line"></span><br><span class="line"><span class="comment">// Upgrading a dependency</span></span><br><span class="line">yarn up [package]</span><br><span class="line">yarn up [package]@[version]</span><br><span class="line">yarn up [package]@[tag]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Removing a dependency</span></span><br><span class="line">yarn remove [package]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Upgrading Yarn itself</span></span><br><span class="line">yarn set version stable</span><br><span class="line">yarn set version latest</span><br><span class="line">yarn set version <span class="keyword">from</span> sources</span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn create vite my-vue-app --template vue</span><br></pre></td></tr></table></figure><p>停用 Vetur 插件，不然会影响 vue3 语法的识别,如果有安装Vue VSCode Snippets 插件也要停用，不然该插件会强制启动Vetur插件<br>vscode 安装 Vue Language Features 和 TypeScript Vue Plugin这两个插件用于识别vue3里的最新语法及vue3里的ts语法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Node.js Package Manager&lt;/p&gt;
&lt;p&gt;npm&lt;br&gt;Yarn&lt;br&gt;pnpm&lt;/p&gt;
&lt;p&gt;npm was the first package manager to introduce the concepts of registry protoco</summary>
      
    
    
    
    <category term="前端" scheme="http://zhengjun.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="http://zhengjun.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>怪诞行为学5-理智与金钱</title>
    <link href="http://zhengjun.top/2022/01/22/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/%E6%80%AA%E8%AF%9E%E8%A1%8C%E4%B8%BA%E5%AD%A65-%E7%90%86%E6%99%BA%E4%B8%8E%E9%87%91%E9%92%B1/"/>
    <id>http://zhengjun.top/2022/01/22/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/%E6%80%AA%E8%AF%9E%E8%A1%8C%E4%B8%BA%E5%AD%A65-%E7%90%86%E6%99%BA%E4%B8%8E%E9%87%91%E9%92%B1/</id>
    <published>2022-01-22T06:16:01.000Z</published>
    <updated>2022-01-27T14:03:44.219Z</updated>
    
    <content type="html"><![CDATA[<p>推荐阅读</p><p>可以避免一些日常生活中的小陷阱，更加理智的消费<br>花钱的时候多考虑一下机会成本（具体到某件物品上，否则用处不大）</p><p>相对性判断，心理账户，付款之痛（预付款然后享受，快乐程度较高），锚定效应，损失厌恶，禀赋效应，惩罚不公平（雨天卖伞要比晴天贵）<br>语言和形式的魔力（让我们觉得价有所值），手工制品的价格更高（因为更花功夫，实际上质量未必有机械加工的好）<br>对一样东西了解的越少越容易依赖锚点（越容易受到锚定效应的干扰）</p><img alt="20220122_143205.png" src="/2022/01/22/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/%E6%80%AA%E8%AF%9E%E8%A1%8C%E4%B8%BA%E5%AD%A65-%E7%90%86%E6%99%BA%E4%B8%8E%E9%87%91%E9%92%B1/20220122_143205.png" width="500" height>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;推荐阅读&lt;/p&gt;
&lt;p&gt;可以避免一些日常生活中的小陷阱，更加理智的消费&lt;br&gt;花钱的时候多考虑一下机会成本（具体到某件物品上，否则用处不大）&lt;/p&gt;
&lt;p&gt;相对性判断，心理账户，付款之痛（预付款然后享受，快乐程度较高），锚定效应，损失厌恶，禀赋效应，惩罚不公平（雨天卖伞要比</summary>
      
    
    
    
    <category term="读书" scheme="http://zhengjun.top/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
    <category term="学习技能" scheme="http://zhengjun.top/tags/%E5%AD%A6%E4%B9%A0%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>vs2010-TODO列表</title>
    <link href="http://zhengjun.top/2022/01/13/%E5%B7%A5%E5%85%B7%E7%B1%BB/visual%20studio/vs2010-TODO%E5%88%97%E8%A1%A8/"/>
    <id>http://zhengjun.top/2022/01/13/%E5%B7%A5%E5%85%B7%E7%B1%BB/visual%20studio/vs2010-TODO%E5%88%97%E8%A1%A8/</id>
    <published>2022-01-13T00:27:26.000Z</published>
    <updated>2022-01-13T00:28:44.506Z</updated>
    
    <content type="html"><![CDATA[<p>注释中的 TODO 事项不显示在任务列表中</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TODO whatever</span></span><br></pre></td></tr></table></figure><p>请转到工具-&gt;选项-&gt;文本编辑器-&gt; C / C ++-&gt;格式-&gt;其他，然后将枚举注释任务设置为True。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;注释中的 TODO 事项不显示在任务列表中&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// TODO</summary>
      
    
    
    
    <category term="工具相关" scheme="http://zhengjun.top/categories/%E5%B7%A5%E5%85%B7%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>embedded-crontab定时任务</title>
    <link href="http://zhengjun.top/2022/01/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F/embedded-crontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://zhengjun.top/2022/01/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F/embedded-crontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2022-01-07T04:37:43.000Z</published>
    <updated>2022-01-18T06:32:49.653Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果没有下面的路径就创建一个</span></span><br><span class="line">/var/spool/cron/crontabs</span><br><span class="line">mkdir -p  /var/spool/cron/crontabs</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑任务,默认是 vi 编辑器</span></span><br><span class="line">crontab -e</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每隔 1 分钟调用一次脚本</span></span><br><span class="line">*/1 * * * * /bin/sh /usr/app/monitorApp.sh</span><br></pre></td></tr></table></figure><span id="more"></span><img alt="20220107_124020.png" src="/2022/01/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F/embedded-crontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/20220107_124020.png" width="500" height><p>在以上各个字段中，还可以使用以下特殊字符：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;*&quot; # 代表所有的取值范围内的数字，如月份字段为*，则表示1到12个月；</span><br><span class="line">&quot;/&quot; # 代表每一定时间间隔的意思，如分钟字段为*/10，表示每10分钟执行1次。</span><br><span class="line">&quot;-&quot; # 代表从某个区间范围，是闭区间。如“2-5”表示“2,3,4,5”，小时字段中0-23/2表示在0~23点范围内每2个小时执行一次。</span><br><span class="line">&quot;,&quot; # 分散的数字（不一定连续），如1,2,3,4,7,9。</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注：由于各个地方每周第一天不一样，因此Sunday=0（第一天）或Sunday=7（最后1天）。</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置完毕后 运行</span></span><br><span class="line">crond</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以通过 ps 来查看</span></span><br><span class="line"></span><br><span class="line">/etc/init.d/cron stop</span><br><span class="line">/etc/init.d/cron start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">/dev/null 2&gt;&amp;1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 如果没有下面的路径就创建一个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/var/spool/cron/crontabs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p  /var/spool/cron/crontabs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 编辑任务,默认是 vi 编辑器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;crontab -e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 每隔 1 分钟调用一次脚本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/1 * * * * /bin/sh /usr/app/monitorApp.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="嵌入式" scheme="http://zhengjun.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>linux-调试程序</title>
    <link href="http://zhengjun.top/2022/01/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux/linux-%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F/"/>
    <id>http://zhengjun.top/2022/01/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux/linux-%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-01-07T01:53:44.000Z</published>
    <updated>2022-01-07T05:08:43.499Z</updated>
    
    <content type="html"><![CDATA[<p>ddd</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ddd&lt;/p&gt;
</summary>
      
    
    
    
    <category term="系统" scheme="http://zhengjun.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="http://zhengjun.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>vue-0001基础信息</title>
    <link href="http://zhengjun.top/2022/01/06/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/javascript/vue/vue-0001%E5%9F%BA%E7%A1%80%E4%BF%A1%E6%81%AF/"/>
    <id>http://zhengjun.top/2022/01/06/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/javascript/vue/vue-0001%E5%9F%BA%E7%A1%80%E4%BF%A1%E6%81%AF/</id>
    <published>2022-01-06T02:43:56.000Z</published>
    <updated>2022-01-27T02:29:06.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue全家桶都有什么"><a href="#vue全家桶都有什么" class="headerlink" title="vue全家桶都有什么"></a>vue全家桶都有什么</h1><p>全家桶，对于开发一个完整的中大型单页面应用项目所必须的插件和框架</p><h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><p>vue-cli也叫脚手架，官方定义为Vue.js 开发的标准工具</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue3.0</span></span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h2 id="vueRouter"><a href="#vueRouter" class="headerlink" title="vueRouter"></a>vueRouter</h2><p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌<br>包含的功能有：</p><span id="more"></span><p>1）嵌套的路由/视图表<br>2）模块化的、基于组件的路由配置<br>3）路由参数、查询、通配符<br>4）基于 Vue.js 过渡系统的视图过渡效果<br>5）细粒度的导航控制<br>6）带有自动激活的 CSS class 的链接<br>7）HTML5 历史模式或 hash 模式，在 IE9 中自动降级<br>8）自定义的滚动条行为</p><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。<br>特性<br>1）从浏览器中创建 XMLHttpRequests<br>2）从 node.js 创建 http 请求<br>3）支持 Promise API<br>4）拦截请求和响应<br>5）转换请求数据和响应数据<br>6）取消请求<br>7）自动转换 JSON 数据<br>8）客户端支持防御 XSRF</p><h2 id="搭配UI框架"><a href="#搭配UI框架" class="headerlink" title="搭配UI框架"></a>搭配UI框架</h2><p>如：iview、vant、elementUI<br>iview 一套基于 Vue的高质量UI 组件库(分为小程序和pc端等不同版本)；<br>vant 轻量、可靠的移动端 Vue 组件库,是有赞开源的一套基于 Vue 2.0 的 Mobile 组件库,旨在更快、更简单地开发基于 Vue 的美观易用的移动站点。<br>Ant Design Vue 是 Ant Design 的 Vue 实现，开发和服务于企业级后台产品。<br>elementUI 是基于 Vue 2.0 桌面端中后台组件库。</p><h1 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h1><img alt="20220106_104423.png" src="/2022/01/06/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/javascript/vue/vue-0001%E5%9F%BA%E7%A1%80%E4%BF%A1%E6%81%AF/20220106_104423.png" width="500" height><p>学习时可以使用最新版本,生产环境需要明确的版本号</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>npm<br>在用 Vue 构建大型应用时推荐使用 npm 安装[1] 。npm 能很好地和诸如 webpack 或 Rollup 模块打包器配合使用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 最新稳定版</span><br><span class="line">$ npm install vue@next</span><br></pre></td></tr></table></figure><p>Browser devtools extension for debugging Vue.js applications.<br><a href="https://github.com/vuejs/devtools#vue-devtools">https://github.com/vuejs/devtools#vue-devtools</a></p><p>Vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h1 id="使用-VSCode-做开发工具"><a href="#使用-VSCode-做开发工具" class="headerlink" title="使用 VSCode 做开发工具"></a>使用 VSCode 做开发工具</h1><p>安装 typescript, vue3 使用 typescript 重构的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i -g typescript</span><br></pre></td></tr></table></figure><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>浏览器至少安装了稳定版的 Vue 开发扩展；如果不支持 vue3 就是用测试版<br><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/ljjemllljcmogpfapbkkighbhhppjdbg?hl=zh-CN">https://chrome.google.com/webstore/detail/vuejs-devtools/ljjemllljcmogpfapbkkighbhhppjdbg?hl=zh-CN</a></p><ul><li>语法高亮 - 安装Vetur插件</li><li>ESLint是检查代码规范和语法错误的</li><li>Prettier则是格式化代码的插件</li><li>Bookmarks //ctrl+alt+k 标记位置，ctrl+alt+l 跳转标记位置</li></ul><h3 id="配置ESLint"><a href="#配置ESLint" class="headerlink" title="配置ESLint"></a>配置ESLint</h3><p>项目根目录下看看有没有 .eslintrc.js 这个文件，如果没有就创建一个。<br>在 package.json里查找有无eslintConfig区段，如果有将其内容复制到 .eslintrc.js 并删除eslintConfig区段。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js 内容大致如下</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;extends&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:prettier/recommended&#x27;</span>, <span class="comment">// 添加 prettier 插件, 注意需要放到 plugin 最后一个</span></span><br><span class="line">    <span class="string">&#x27;@vue/prettier&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// rules 里面的内容根据团队风格统一配置</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;error&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;error&#x27;</span> : <span class="string">&#x27;off&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;babel-eslint&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置Prettier"><a href="#配置Prettier" class="headerlink" title="配置Prettier"></a>配置Prettier</h3><p>在项目根目录下创建 .prettierrc.js<br>配置在使用Prettier格式化的时候会自动把双引号转成单引号，并且移除句尾的分号</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>,  <span class="comment">// 使用单引号</span></span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">false</span>  <span class="comment">// 句尾不使用分号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关闭 Vetur 的模板校验功能，因为我们将使用 ESLint + Prettier 来实现。<br>打开 Settings 在 User 选项卡下搜索 vetur.validation.template ，如图所示取消勾选即可。</p><p>ctrl+shift+p 输入 settings 找到 user settings 不带 json 字样的，搜索 vetur.validation.template 去掉勾选</p><p>ESLint增加vue格式支持<br>在 User 选项卡下搜索 eslint.validate ，点击 Edit in settings.json</p><p>新建文档 index.html 输入 ! 然后选择提示项目 就会自动生成一个 html 框架代码</p><p>方法只要重新渲染就会被调用，而计算属性不会，计算属性只有在依赖的内容发生改变时才会变化</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;vue全家桶都有什么&quot;&gt;&lt;a href=&quot;#vue全家桶都有什么&quot; class=&quot;headerlink&quot; title=&quot;vue全家桶都有什么&quot;&gt;&lt;/a&gt;vue全家桶都有什么&lt;/h1&gt;&lt;p&gt;全家桶，对于开发一个完整的中大型单页面应用项目所必须的插件和框架&lt;/p&gt;
&lt;h2 id=&quot;vue-cli&quot;&gt;&lt;a href=&quot;#vue-cli&quot; class=&quot;headerlink&quot; title=&quot;vue-cli&quot;&gt;&lt;/a&gt;vue-cli&lt;/h2&gt;&lt;p&gt;vue-cli也叫脚手架，官方定义为Vue.js 开发的标准工具&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// vue3.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install -g @vue/cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;vueRouter&quot;&gt;&lt;a href=&quot;#vueRouter&quot; class=&quot;headerlink&quot; title=&quot;vueRouter&quot;&gt;&lt;/a&gt;vueRouter&lt;/h2&gt;&lt;p&gt;Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌&lt;br&gt;包含的功能有：&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>csharp-embedded resource file</title>
    <link href="http://zhengjun.top/2022/01/04/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/csharp/csharp-embedded-resource-file/"/>
    <id>http://zhengjun.top/2022/01/04/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/csharp/csharp-embedded-resource-file/</id>
    <published>2022-01-04T02:42:33.000Z</published>
    <updated>2022-01-04T04:57:46.997Z</updated>
    
    <content type="html"><![CDATA[<p>使用 vs2022 add new item-Resources File，默认是 string<br>然后可以通过 vs 提供的工具添加 文件，图片等</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 默认读出来的是  byte[] </span><br><span class="line">string cnf_prefix = System.Text.Encoding.ASCII.GetString(Resource1.server, 0, Resource1.server.Length);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 释放resx里面的普通类型文件</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;resource&quot;&gt;resx里面的资源&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;path&quot;&gt;释放到的路径&lt;/param&gt;</span><br><span class="line">private void ExtractNormalFileInResx(byte[] resource, String path)</span><br><span class="line">&#123;</span><br><span class="line">    FileStream file = new FileStream(path, FileMode.Create);</span><br><span class="line">    file.Write(resource, 0, resource.Length);</span><br><span class="line">    file.Flush();</span><br><span class="line">    file.Close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 释放resx文件里面的音频资源文件</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;fileInResx&quot;&gt;在resx里面的音频文件&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;path&quot;&gt;释放到的路径&lt;/param&gt;</span><br><span class="line">private void ExtractAudioFileInResx(Stream fileInResx, String path)</span><br><span class="line">&#123;</span><br><span class="line">    Stream input = fileInResx;</span><br><span class="line">    FileStream output = new FileStream(path, FileMode.Create);</span><br><span class="line">    byte[] data = new byte[1024];</span><br><span class="line">    int lengthEachRead;</span><br><span class="line">    while ((lengthEachRead = input.Read(data, 0, data.Length)) &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        output.Write(data, 0, lengthEachRead);</span><br><span class="line">    &#125;</span><br><span class="line">    output.Flush();</span><br><span class="line">    output.Close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 释放resx里的图片资源文件</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;image&quot;&gt;resx里的图片资源&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;path&quot;&gt;释放到的路径&lt;/param&gt;</span><br><span class="line">private void ExtractImageFileInResx(Bitmap image, String path)</span><br><span class="line">&#123;</span><br><span class="line">    MemoryStream memoryStream = new MemoryStream();</span><br><span class="line">    image.Save(memoryStream, image.RawFormat);</span><br><span class="line">    byte[] data = memoryStream.ToArray();</span><br><span class="line">    FileStream file = new FileStream(path, FileMode.Create);</span><br><span class="line">    file.Write(data, 0, data.Length);</span><br><span class="line">    file.Flush();</span><br><span class="line">    file.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 vs2022 add new item-Resources File，默认是 string&lt;br&gt;然后可以通过 vs 提供的工具添加 文件，图片等&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="Language" scheme="http://zhengjun.top/categories/Language/"/>
    
    
    <category term="csharp" scheme="http://zhengjun.top/tags/csharp/"/>
    
  </entry>
  
  <entry>
    <title>2022年寄语</title>
    <link href="http://zhengjun.top/2021/12/31/%E9%9A%8F%E7%AC%94/2022%E5%B9%B4%E5%AF%84%E8%AF%AD/"/>
    <id>http://zhengjun.top/2021/12/31/%E9%9A%8F%E7%AC%94/2022%E5%B9%B4%E5%AF%84%E8%AF%AD/</id>
    <published>2021-12-31T11:19:09.000Z</published>
    <updated>2021-12-31T11:47:26.048Z</updated>
    
    <content type="html"><![CDATA[<p>2021年过去了，今天是最后一天，在这个时间作总结和展望还是挺合适的。</p><p>非常不幸，国内疫情又起来了，五一，十一两大节日很难保证没事，老婆孩子今年又不能来了。连续两年了哈，这病毒真是害人不浅呀。<br>今年6月末的时候换了工作，回到了之前呆过的公司，工资少了，时间多了。之所以换工作是因为目前的公司周日已经安排工作了，自己的学习时间不足了。<br>碰巧之前公司的人找我回去，为了双休和早八晚五我就过去了。</p><p>下半年我把大部分精力都放在了股票上，虽然做的也不是很理想，但是在向着好的方向发展。还需要不断地学习和训练自己。<br>需要更多的实战经验。需要有自己的交易系统。</p><p>2021年总结两个字 “萌芽”</p><p>2022年的任务很简单：</p><ol><li>健身</li><li>发展股票事业</li></ol><p>作为后半生的养老事业，我给自己三年的时间来成长。如果2025年初，我还不能通过股票来赚钱的话，那只能说明我不适合吃这碗饭，还要另谋他法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2021年过去了，今天是最后一天，在这个时间作总结和展望还是挺合适的。&lt;/p&gt;
&lt;p&gt;非常不幸，国内疫情又起来了，五一，十一两大节日很难保证没事，老婆孩子今年又不能来了。连续两年了哈，这病毒真是害人不浅呀。&lt;br&gt;今年6月末的时候换了工作，回到了之前呆过的公司，工资少了，时</summary>
      
    
    
    
    <category term="随笔" scheme="http://zhengjun.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="杂记" scheme="http://zhengjun.top/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python-并行开发</title>
    <link href="http://zhengjun.top/2021/12/30/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/python-%E5%B9%B6%E8%A1%8C%E5%BC%80%E5%8F%91/"/>
    <id>http://zhengjun.top/2021/12/30/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/python-%E5%B9%B6%E8%A1%8C%E5%BC%80%E5%8F%91/</id>
    <published>2021-12-30T13:26:49.000Z</published>
    <updated>2021-12-30T13:57:57.732Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">code_len = <span class="built_in">len</span>(codes)</span><br><span class="line">cpus = os.cpu_count()</span><br><span class="line">per_thread_cnt = <span class="built_in">int</span>(code_len / cpus)</span><br><span class="line">code_len = <span class="built_in">len</span>(codes)</span><br><span class="line">cpus = os.cpu_count()</span><br><span class="line"><span class="keyword">if</span> cpus <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    cpus = <span class="number">8</span></span><br><span class="line">futures = []</span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor(max_workers=cpus) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, cpus):</span><br><span class="line">        stop = per_thread_cnt * (i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> i == cpus - <span class="number">1</span>:</span><br><span class="line">            stop = code_len</span><br><span class="line">        code_list = codes[per_thread_cnt * i:stop]</span><br><span class="line">        futures.append(executor.submit(screen_stock_work,json_param, code_list))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> concurrent.futures.as_completed(futures):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = future.result()</span><br><span class="line">            <span class="keyword">for</span> it <span class="keyword">in</span> data:</span><br><span class="line">                nngPair.send(<span class="built_in">bytes</span>(json.dumps(&#123;<span class="string">&#x27;CmdType&#x27;</span>: CMD_SCREEN_LIST_RESULT, <span class="string">&#x27;Param&#x27;</span>: it&#125;), encoding=<span class="string">&#x27;utf-16&#x27;</span>)[<span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;generated an exception: %s&#x27;</span> % ( exc))</span><br><span class="line"></span><br><span class="line">msg = &#123;<span class="string">&#x27;CmdType&#x27;</span>: CMD_SCREEN_DONE, <span class="string">&#x27;Param&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;code_len&#125;</span>&#x27;</span>&#125;</span><br><span class="line">nngPair.send(<span class="built_in">bytes</span>(json.dumps(msg), encoding=<span class="string">&#x27;utf-16&#x27;</span>)[<span class="number">2</span>:])</span><br><span class="line">flag &amp;= (~FLAG_SCREEN_LIST_START)</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;code_len = &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(codes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cpus = os.cpu_count()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;per_thread_cnt = &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(code_len / cpus)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;code_len = &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(codes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cpus = os.cpu_count()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cpus &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cpus = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;futures = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; concurrent.futures.ProcessPoolExecutor(max_workers=cpus) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; executor:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, cpus):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stop = per_thread_cnt * (i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == cpus - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            stop = code_len&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        code_list = codes[per_thread_cnt * i:stop]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        futures.append(executor.submit(screen_stock_work,json_param, code_list))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; future &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; concurrent.futures.as_completed(futures):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            data = future.result()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; it &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                nngPair.send(&lt;span class=&quot;built_in&quot;&gt;bytes&lt;/span&gt;(json.dumps(&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;#x27;CmdType&amp;#x27;&lt;/span&gt;: CMD_SCREEN_LIST_RESULT, &lt;span class=&quot;string&quot;&gt;&amp;#x27;Param&amp;#x27;&lt;/span&gt;: it&amp;#125;), encoding=&lt;span class=&quot;string&quot;&gt;&amp;#x27;utf-16&amp;#x27;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; exc:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;generated an exception: %s&amp;#x27;&lt;/span&gt; % ( exc))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msg = &amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;#x27;CmdType&amp;#x27;&lt;/span&gt;: CMD_SCREEN_DONE, &lt;span class=&quot;string&quot;&gt;&amp;#x27;Param&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;f&amp;#x27;&lt;span class=&quot;subst&quot;&gt;&amp;#123;code_len&amp;#125;&lt;/span&gt;&amp;#x27;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nngPair.send(&lt;span class=&quot;built_in&quot;&gt;bytes&lt;/span&gt;(json.dumps(msg), encoding=&lt;span class=&quot;string&quot;&gt;&amp;#x27;utf-16&amp;#x27;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flag &amp;amp;= (~FLAG_SCREEN_LIST_START)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Language" scheme="http://zhengjun.top/categories/Language/"/>
    
    
    <category term="Python" scheme="http://zhengjun.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>embedded-kernel相关</title>
    <link href="http://zhengjun.top/2021/12/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F/embedded-kernel%E7%9B%B8%E5%85%B3/"/>
    <id>http://zhengjun.top/2021/12/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F/embedded-kernel%E7%9B%B8%E5%85%B3/</id>
    <published>2021-12-28T08:03:40.000Z</published>
    <updated>2021-12-28T08:05:11.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定时不准"><a href="#定时不准" class="headerlink" title="定时不准"></a>定时不准</h2><p>在配置菜单中有个 高精度定时器 把该选项选中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定时不准&quot;&gt;&lt;a href=&quot;#定时不准&quot; class=&quot;headerlink&quot; title=&quot;定时不准&quot;&gt;&lt;/a&gt;定时不准&lt;/h2&gt;&lt;p&gt;在配置菜单中有个 高精度定时器 把该选项选中&lt;/p&gt;
</summary>
      
    
    
    
    <category term="嵌入式" scheme="http://zhengjun.top/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>linux-datetime</title>
    <link href="http://zhengjun.top/2021/12/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux/linux-datetime/"/>
    <id>http://zhengjun.top/2021/12/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux/linux-datetime/</id>
    <published>2021-12-28T01:27:39.000Z</published>
    <updated>2021-12-28T01:29:01.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer_Handler</span><span class="params">(<span class="keyword">union</span> sigval v)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">LOG_INFO&lt;&lt;<span class="string">&quot;timer_Handler enter...&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_timer</span><span class="params">(<span class="keyword">timer_t</span> *timerid, struct sigevent *evp, struct itimerspec *it)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( !evp || !it )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">memset</span>(evp, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct sigevent));   <span class="comment">//清零初始化  </span></span><br><span class="line">  </span><br><span class="line">    evp-&gt;sigev_value.sival_int = <span class="number">111</span>;        <span class="comment">//也是标识定时器的，这和timerid有什么区别？回调函数可以获得  </span></span><br><span class="line">    evp-&gt;sigev_notify = SIGEV_THREAD;        <span class="comment">//线程通知的方式，派驻新线程  </span></span><br><span class="line">    evp-&gt;sigev_notify_function = timer_Handler;   <span class="comment">//线程函数地址  </span></span><br><span class="line">   <span class="comment">// evp.sigev_value.sival_ptr = this; //这里传一个参数进去，在timer的callback回调函数里面可以获得它  </span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (timer_create(CLOCK_REALTIME, evp, timerid) == <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        perror(<span class="string">&quot;fail to timer_create&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;;  </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;timer_create timerid = %d\n&quot;</span>, (<span class="keyword">int</span>)*timerid);</span><br><span class="line">    it-&gt;it_interval.tv_sec = <span class="number">0</span>;  <span class="comment">// 后续按照该时间间隔 </span></span><br><span class="line">    it-&gt;it_interval.tv_nsec =  <span class="number">14</span>*<span class="number">1000000</span>; <span class="comment">//14ms   </span></span><br><span class="line"></span><br><span class="line">    it-&gt;it_value.tv_sec = <span class="number">0</span>;     <span class="comment">// 最初开始时间间隔 </span></span><br><span class="line">    it-&gt;it_value.tv_nsec = <span class="number">14</span>*<span class="number">1000000</span>; <span class="comment">//14ms  </span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">start_timer</span><span class="params">(<span class="keyword">timer_t</span> *timerid, struct itimerspec *it)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (it == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (timer_settime(*timerid, <span class="number">0</span>, it, <span class="literal">NULL</span>) == <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        perror(<span class="string">&quot;fail to timer_settime&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">timer_t</span> timerid = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigevent</span> <span class="title">evp</span>;</span>  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">itimerspec</span> <span class="title">it</span>;</span>  </span><br><span class="line"><span class="comment">//memset(&amp;evp, 0x00, sizeof(struct sigevent));</span></span><br><span class="line"><span class="comment">//memset(&amp;it, 0x00, sizeof(struct itimerspec));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ret = init_timer(&amp;timerid, &amp;evp, &amp;it);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;init_timer failed\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">ret = start_timer(&amp;timerid, &amp;it);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;start_timer failed\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;start timer ok\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;timer&quot;&gt;&lt;a href=&quot;#timer&quot; class=&quot;headerlink&quot; title=&quot;timer&quot;&gt;&lt;/a&gt;timer&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    <category term="系统" scheme="http://zhengjun.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="http://zhengjun.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>罗汉果</title>
    <link href="http://zhengjun.top/2021/12/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%94%9F%E6%B4%BB%E5%B0%8F%E7%9F%A5%E8%AF%86/%E7%BD%97%E6%B1%89%E6%9E%9C/"/>
    <id>http://zhengjun.top/2021/12/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%94%9F%E6%B4%BB%E5%B0%8F%E7%9F%A5%E8%AF%86/%E7%BD%97%E6%B1%89%E6%9E%9C/</id>
    <published>2021-12-20T00:41:15.000Z</published>
    <updated>2022-01-18T07:05:48.415Z</updated>
    
    <content type="html"><![CDATA[<p>罗汉果产地在广西桂林永福县和临桂县 龙胜县的最好</p><p>罗汉果对生长环境要求十分特殊，只有在中国广西北部才能生长。中国广西永福县、融安县、临桂县是罗汉果的三大产地，产量占全球90%，其中永福县是原产地。目前，全球罗汉果的年均产量仅为1亿枚左右。</p><p>非糖类甜味剂<br>水果的甜味主要来自罗汉果甜苷，一组三萜烯糖苷，这构成了新鲜水果的果肉约1％。通过溶剂萃取，可以得到含有80％罗汉果苷的粉末，主要的一个是罗汉果皂甙-5。在水果其它类似的成分为赛门苷和新罗汉果甜苷。</p><span id="more"></span><p>所述植物最珍贵的在甜蜜果实，这是作为药用和作为甜味剂。在中国的传统中药，它用于治疗咳嗽和喉咙痛，并在中国南方它被认为是一个长寿的助剂。果实一般以干燥形式出售，传统上以草药茶或汤使用。</p><p>报导称罗汉果无不良的副作用。从美国食品和药物管理局（FDA）的食品添加剂中，一般认为安全。没有限制消费果实或其提取物。<br>根据加工技术和产品品质的差异，干罗汉果可分为第一代干罗汉果、第二代干罗汉果和第三代干罗汉果。</p><p>第三代干罗汉果一眼就可以识别出来：没有绒毛，表面光洁。 最好，价格最贵</p><p>绒毛是动、植物用于保暖、御敌的功能器官，本身无营养。绒毛容易藏污纳垢（细菌、霉菌、鸟粪、虫粪、农药等），也是寄生虫、微生物滋生的良好载体。所以，冬瓜绒毛、枇杷叶绒毛、鸡毛、猪毛用前均需去除。</p><p>研究发现，鲜罗汉果表层富集的微生物高达数百万个，对身体健康风险极大。而经打磨洁净后，可达到食用标准。</p><p>第二代干罗汉果<br>中温控湿果（也有命名为“低温干燥”）</p><p>新鲜果<br><img alt="20211220_085028.png" src="/2021/12/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%94%9F%E6%B4%BB%E5%B0%8F%E7%9F%A5%E8%AF%86/%E7%BD%97%E6%B1%89%E6%9E%9C/20211220_085028.png" width="500" height></p><p>干燥果<br><img alt="20211220_085042.png" src="/2021/12/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%94%9F%E6%B4%BB%E5%B0%8F%E7%9F%A5%E8%AF%86/%E7%BD%97%E6%B1%89%E6%9E%9C/20211220_085042.png" width="500" height></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;罗汉果产地在广西桂林永福县和临桂县 龙胜县的最好&lt;/p&gt;
&lt;p&gt;罗汉果对生长环境要求十分特殊，只有在中国广西北部才能生长。中国广西永福县、融安县、临桂县是罗汉果的三大产地，产量占全球90%，其中永福县是原产地。目前，全球罗汉果的年均产量仅为1亿枚左右。&lt;/p&gt;
&lt;p&gt;非糖类甜味剂&lt;br&gt;水果的甜味主要来自罗汉果甜苷，一组三萜烯糖苷，这构成了新鲜水果的果肉约1％。通过溶剂萃取，可以得到含有80％罗汉果苷的粉末，主要的一个是罗汉果皂甙-5。在水果其它类似的成分为赛门苷和新罗汉果甜苷。&lt;/p&gt;</summary>
    
    
    
    <category term="健康" scheme="http://zhengjun.top/categories/%E5%81%A5%E5%BA%B7/"/>
    
    
    <category term="代茶饮" scheme="http://zhengjun.top/tags/%E4%BB%A3%E8%8C%B6%E9%A5%AE/"/>
    
  </entry>
  
  <entry>
    <title>时间序列数据库</title>
    <link href="http://zhengjun.top/2021/12/18/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://zhengjun.top/2021/12/18/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-12-18T00:50:30.000Z</published>
    <updated>2021-12-18T00:54:01.985Z</updated>
    
    <content type="html"><![CDATA[<p>调研了一下存储时间序列数据的数据库。</p><p>MongoDB：一个不错的选择，目前有很多量化团队在使用MongoDB作数据存储。对于中低频策略应该完全没问题。<br>InfluxDB：无论是面对历史回测或者实时交易的场景，InfluxDB都是很好的选择。<br>HDF5：非常高效的二进制文件，用来存储静态数据，特别是面对科学计算问题。<br>Kdb+：商用软件，性能很强大，但是q查询语言学习曲线很陡峭，而且license很贵。<br>DolphinDB：比较新的时序数据库，也是商用软件， 官方宣称其性能可以替代kdb+。</p><p>RedisTimeSeries 这个没有作进一步了解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;调研了一下存储时间序列数据的数据库。&lt;/p&gt;
&lt;p&gt;MongoDB：一个不错的选择，目前有很多量化团队在使用MongoDB作数据存储。对于中低频策略应该完全没问题。&lt;br&gt;InfluxDB：无论是面对历史回测或者实时交易的场景，InfluxDB都是很好的选择。&lt;br&gt;HDF</summary>
      
    
    
    
    <category term="大数据" scheme="http://zhengjun.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="http://zhengjun.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>python-hdf5</title>
    <link href="http://zhengjun.top/2021/12/18/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/python-hdf5/"/>
    <id>http://zhengjun.top/2021/12/18/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/python-hdf5/</id>
    <published>2021-12-18T00:48:26.000Z</published>
    <updated>2021-12-19T03:08:45.968Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.h5py.org/">hdf5</a></p><img alt="20211219_101957.png" src="/2021/12/18/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/python-hdf5/20211219_101957.png" width="500" height><p>还是不使用这个了，在保存 dataframe 的时候有问题，比较麻烦。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">store = pd.HDFStore(<span class="string">&#x27;demo.h5&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;查看store类型&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(store)</span><br></pre></td></tr></table></figure><p>h5py 保存 dataframe 好像问题很多，没有继续尝试了，直接使用了 HDFStore</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda install h5py</span><br><span class="line">conda install pytest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完毕测试一下，确认没问题，预编译的版本不支持 MPI，这里关于 MPI 的错误可以忽略</span></span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line">h5py.run_tests()</span><br></pre></td></tr></table></figure><p>一般的操作一个HDF5对象的步骤是</p><ol><li>打开这个对象；</li><li>对这个对象进行操作；</li><li>关闭这个对象。<br>特别要注意的是，一定要在操作结束后关闭对象。因为之前的操作只是生成操作的流程，并不真正执行操作，只有关闭对象操作才会真正出发对对象进行的修改。<!-- more --><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="comment"># 以写入方式打开文件</span></span><br><span class="line"><span class="comment"># r 只读，文件必须已存在</span></span><br><span class="line"><span class="comment"># r+ 读写，文件必须已存在</span></span><br><span class="line"><span class="comment"># w 新建文件，若存在覆盖</span></span><br><span class="line"><span class="comment"># w- 或x，新建文件，若存在报错</span></span><br><span class="line"><span class="comment"># a 如存在则读写，不存在则创建(默认)</span></span><br><span class="line">file = h5py.File(<span class="string">&#x27;file.h5&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file_open = h5py.File(<span class="string">&#x27;file.h5&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>)</span><br><span class="line">file_open.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h5_demo</span>():</span></span><br><span class="line">    <span class="comment"># 读文件放入内存</span></span><br><span class="line">    <span class="keyword">with</span> h5py.File(<span class="string">&#x27;demo.h5&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>,driver=<span class="string">&#x27;core&#x27;</span>,backing_store=<span class="literal">True</span>) <span class="keyword">as</span> file:</span><br><span class="line"></span><br><span class="line">        file.close()</span><br></pre></td></tr></table></figure></li></ol><p>Groups<br>Datasets</p><h2 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h2><p>group 是主要的组织结构，类似于 dictionary ，key 是 group 的名字，value 是属于该组的内容，可以是 group 和 datasets</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">keys()</span><br><span class="line">values()</span><br><span class="line"></span><br><span class="line">myds = subgrp[<span class="string">&quot;MyDS&quot;</span>]</span><br><span class="line">missing = subgrp[<span class="string">&quot;missing&quot;</span>]</span><br><span class="line">KeyError: <span class="string">&quot;Name doesn&#x27;t exist (Symbol table: Object not found)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> subgroup[<span class="string">&quot;MyDataset&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="Datasets"><a href="#Datasets" class="headerlink" title="Datasets"></a>Datasets</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建新的</span></span><br><span class="line">dset = f.create_dataset(<span class="string">&quot;default&quot;</span>, (<span class="number">100</span>,))</span><br><span class="line">dset = f.create_dataset(<span class="string">&quot;ints&quot;</span>, (<span class="number">100</span>,), dtype=<span class="string">&#x27;i8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 NumPy 中创建</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = np.arange(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dset = f.create_dataset(<span class="string">&quot;init&quot;</span>, data=arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取已有的</span></span><br><span class="line">dset = group[<span class="string">&quot;name&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="hdfstore"><a href="#hdfstore" class="headerlink" title="hdfstore"></a>hdfstore</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">store = pd.HDFStore(<span class="string">&#x27;demo.h5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hdf =HDFStore(<span class="string">&#x27;hdf_file.h5&#x27;</span>, mode=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">data = hdf.get(<span class="string">&#x27;/key1&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://www.h5py.org/&quot;&gt;hdf5&lt;/a&gt;&lt;/p&gt;
&lt;img alt=&quot;20211219_101957.png&quot; src=&quot;/2021/12/18/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/python-hdf5/20211219_101957.png&quot; width=&quot;500&quot; height&gt;

&lt;p&gt;还是不使用这个了，在保存 dataframe 的时候有问题，比较麻烦。&lt;/p&gt;</summary>
    
    
    
    <category term="Language" scheme="http://zhengjun.top/categories/Language/"/>
    
    
    <category term="Python" scheme="http://zhengjun.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>使用lldb调试bitcoin</title>
    <link href="http://zhengjun.top/2021/12/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE/bitcoin/%E4%BD%BF%E7%94%A8lldb%E8%B0%83%E8%AF%95bitcoin/"/>
    <id>http://zhengjun.top/2021/12/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE/bitcoin/%E4%BD%BF%E7%94%A8lldb%E8%B0%83%E8%AF%95bitcoin/</id>
    <published>2021-12-11T12:59:46.900Z</published>
    <updated>2021-12-11T14:01:54.494Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu 16.04 安装 LLDB</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install LLDB</span><br></pre></td></tr></table></figure><p>如果提示缺少 six 包，需要使用 python 安装一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// install pip</span><br><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install six</span><br></pre></td></tr></table></figure><span id="more"></span><p>注意 docker 里面使用的时候，需要使用 –privileged 参数创建容器</p><h2 id="config-file-默认配置文件"><a href="#config-file-默认配置文件" class="headerlink" title="config file 默认配置文件"></a>config file 默认配置文件</h2><p>放入喜欢的命令，会在启动的时候执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.lldbinit</span><br><span class="line">type format add --format hex int</span><br><span class="line">type format add --format hex &quot;char&quot;</span><br><span class="line">type format add --format hex &quot;unsigned char&quot;</span><br><span class="line">set set stop-line-count-before 20</span><br><span class="line">set set stop-line-count-after 15</span><br><span class="line">settings set target.max-string-summary-length 16384</span><br><span class="line">command alias brpos breakpoint set -f %1 -l %2</span><br><span class="line">settings set target.process.thread.step-in-avoid-nodebug false</span><br><span class="line">settings set target.skip-prologue false</span><br><span class="line">settings set target.x86-disassembly-flavor intel</span><br><span class="line">settings set stop-disassembly-count 8</span><br></pre></td></tr></table></figure><h2 id="lldb-使用样例"><a href="#lldb-使用样例" class="headerlink" title="lldb 使用样例"></a>lldb 使用样例</h2><p>命令格式：<br><noun>命令、<verb>命令操作、options命令选项、argument参数。命令各个元素之间用空格隔开，如果参数之中有空格则需要加上双引号。如果参数中带有反斜杠和双引号，则需要在其前面加上反斜杠。</verb></noun></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;noun&gt; &lt;verb&gt; [-options [option-value]] [argument [argument...]]</span><br></pre></td></tr></table></figure><p>options命令选项可以放在命令行的任何地方，但是如果argument参数以“-”开头，那么必须在option后面添加“–”结束标志进行区分，从而确定option的正确位置。例如你想启动一程序，“process launch”命令的option为“–stop-at-entry”，同时希望命令的argument为“-program_arg value”，你应该输入的命令为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) process launch --stop-at-entry -- -program_arg value</span><br></pre></td></tr></table></figure><h3 id="macos-使用-lldb-调试-bitoin"><a href="#macos-使用-lldb-调试-bitoin" class="headerlink" title="macos 使用 lldb 调试 bitoin"></a>macos 使用 lldb 调试 bitoin</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果有下面的错误提示</span></span><br><span class="line">ImportError: cannot <span class="keyword">import</span> name _remove_dead_weakref</span><br><span class="line"><span class="comment">// 切回系统自带python</span></span><br><span class="line">export PATH=/usr/bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lldb -h</span><br></pre></td></tr></table></figure><h3 id="载入程序"><a href="#载入程序" class="headerlink" title="载入程序"></a>载入程序</h3><p>启动时载入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lldb ./src/primecoind</span><br></pre></td></tr></table></figure><p>动态栽入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lldb</span><br><span class="line">(lldb) file /Projects/Sketch/build/Debug/Sketch.app</span><br></pre></td></tr></table></figure><h3 id="运行前设置环境变量"><a href="#运行前设置环境变量" class="headerlink" title="运行前设置环境变量"></a>运行前设置环境变量</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) settings set target.env-vars DEBUG=1</span><br><span class="line">(lldb) set se target.env-vars DEBUG=1</span><br><span class="line">(lldb) env DEBUG=1</span><br></pre></td></tr></table></figure><h3 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h3><p>函数名 foo</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) breakpoint set -n foo</span><br><span class="line">breakpoint 简写 br</span><br><span class="line"></span><br><span class="line">// 可以一次指定多个函数</span><br><span class="line">(lldb) br set --name foo --name bar</span><br></pre></td></tr></table></figure><p>文件 foo.c 行数 12</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) br set -f foo.c -l 12</span><br></pre></td></tr></table></figure><p>条件断点</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) breakpoint set --name foo --condition &#x27;(int)strcmp(y,&quot;hello&quot;) == 0&#x27;</span><br><span class="line">(lldb) br s -n foo -c &#x27;(int)strcmp(y,&quot;hello&quot;) == 0&#x27;</span><br></pre></td></tr></table></figure><p>查看断点信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) br list</span><br><span class="line">(lldb) br l</span><br></pre></td></tr></table></figure><p>禁用断点</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 禁用断点</span><br><span class="line"># 根据上面查看断点列表的时候的序号来操作断点</span><br><span class="line">(lldb) breakpoint disable 2</span><br></pre></td></tr></table></figure><p>启用断点</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) breakpoint enable 2</span><br></pre></td></tr></table></figure><p>删除断点</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) br del 1</span><br></pre></td></tr></table></figure><p>执行到指定行数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thread until linenum</span><br></pre></td></tr></table></figure><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p>下面的命令都是一样的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) process launch</span><br><span class="line">(lldb) run</span><br><span class="line">(lldb) r</span><br></pre></td></tr></table></figure><p>运行时设置环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) r -v DEBUG=1</span><br></pre></td></tr></table></figure><h4 id="指定参数运行"><a href="#指定参数运行" class="headerlink" title="指定参数运行"></a>指定参数运行</h4><p>例如你想启动一程序，“process launch”命令的option为“–stop-at-entry”，同时希望命令的argument为“-program_arg value”，你应该输入的命令为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) process launch --stop-at-entry -- -program_arg value</span><br><span class="line">(lldb) process launch -- &lt;args&gt;</span><br><span class="line">(lldb) r &lt;args&gt;</span><br></pre></td></tr></table></figure><h4 id="附加在已经运行的程序"><a href="#附加在已经运行的程序" class="headerlink" title="附加在已经运行的程序"></a>附加在已经运行的程序</h4><p>waitfor 参数，会在下次程序运行时自动附加上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) process attach --pid 123</span><br><span class="line">(lldb) process attach --name Sketch</span><br><span class="line">(lldb) process attach --name Sketch --waitfor</span><br></pre></td></tr></table></figure><h4 id="继续运行"><a href="#继续运行" class="headerlink" title="继续运行"></a>继续运行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) thread continue // &quot;c&quot;</span><br><span class="line">(lldb) thread step-in    // The same as gdb&#x27;s &quot;step&quot; or &quot;s&quot;</span><br><span class="line">(lldb) thread step-over  // The same as gdb&#x27;s &quot;next&quot; or &quot;n&quot;</span><br><span class="line">(lldb) thread step-out   // The same as gdb&#x27;s &quot;finish&quot; or &quot;f&quot;</span><br><span class="line"></span><br><span class="line">// 按指令步进</span><br><span class="line">(lldb) thread step-inst       // The same as gdb&#x27;s &quot;stepi&quot; / &quot;si&quot;</span><br><span class="line">(lldb) thread step-over-inst  // The same as gdb&#x27;s &quot;nexti&quot; / &quot;ni&quot;</span><br></pre></td></tr></table></figure><h3 id="停止程序"><a href="#停止程序" class="headerlink" title="停止程序"></a>停止程序</h3><p>Stop your process.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) exit</span><br></pre></td></tr></table></figure><h3 id="查看当前代码"><a href="#查看当前代码" class="headerlink" title="查看当前代码"></a>查看当前代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) f</span><br><span class="line">//显示前 10 行</span><br><span class="line">(lldb) l -</span><br><span class="line">list 1就回到第一行了。l 13就是从第13行开始往下看10行。</span><br><span class="line">list 文件名看其他文件的代码</span><br><span class="line">(lldb) list ArrayUtils.c</span><br><span class="line">看某个函数的代码</span><br><span class="line">(lldb) list main</span><br></pre></td></tr></table></figure><h3 id="查看变量"><a href="#查看变量" class="headerlink" title="查看变量"></a>查看变量</h3><p>print（简写p）如果打印的是基础数据类型，则会列出基础数据类型的类型和值。如果是对象，还会打印出对象指针地址<br>print的打印信息较多，如果只想查看对象的值，则可以使用po（printobject）命令<br>对于基础数据类型，还可以指定格式打印，如用16进制的格式打印：<br>po一般用来输出指针指向的那个对象，p一般用来输出基础变量。普通数组两者都可用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) p str</span><br><span class="line">(lldb) po str</span><br><span class="line">(lldb) p/x 16</span><br><span class="line">0x10</span><br></pre></td></tr></table></figure><h3 id="查看本地变量"><a href="#查看本地变量" class="headerlink" title="查看本地变量"></a>查看本地变量</h3><p>frame variable 简称 fr v</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">列出所有变量</span><br><span class="line">(lldb) fr v</span><br><span class="line"></span><br><span class="line">指定变量 self</span><br><span class="line">(lldb) fr v self</span><br><span class="line"></span><br><span class="line">指定变量 self 的子元素</span><br><span class="line">(lldb) fr v self.isa</span><br></pre></td></tr></table></figure><h3 id="设置显示代码行数"><a href="#设置显示代码行数" class="headerlink" title="设置显示代码行数"></a>设置显示代码行数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) set set stop-line-count-before 10</span><br><span class="line">(lldb) set set stop-line-count-after 10</span><br></pre></td></tr></table></figure><h3 id="设置查看类型"><a href="#设置查看类型" class="headerlink" title="设置查看类型"></a>设置查看类型</h3><p>下面会把 int，unsigned char 类型的数据显示成 16 进制形式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) type format add --format hex int</span><br><span class="line">(lldb) type format add --format hex &quot;unsigned char&quot;</span><br></pre></td></tr></table></figure><h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 比如下面的这条命令</span><br><span class="line">(lldb) breakpoint set --file DebugDemo.c --line 10</span><br><span class="line"></span><br><span class="line"># 你就可以写这样的别名</span><br><span class="line">(lldb) command alias brpos breakpoint set -f %1 -l %2</span><br><span class="line"></span><br><span class="line"># 使用的时候就像这样就好了</span><br><span class="line">(lldb) brpos DebugDemo.c 10</span><br></pre></td></tr></table></figure><h3 id="修改变量"><a href="#修改变量" class="headerlink" title="修改变量"></a>修改变量</h3><p>expression表达式(expr)，expr常用于调试时修改变量的值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) expr self.productId = @&quot;A0000001076&quot;</span><br></pre></td></tr></table></figure><p>它的作用不仅仅是修改变量的值，你加其他功能的代码也是可以的，只要是和上下文相关的一句代码就OK<br>注意：表达式之后不需要加分号，加了分号之后会报错</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) expr self.superNavBarView.backgroundColor = [UIColor redColor]</span><br><span class="line">(UICachedDeviceRGBColor *) $3 = 0x00007ffc783d0290</span><br></pre></td></tr></table></figure><h3 id="查看线程状态"><a href="#查看线程状态" class="headerlink" title="查看线程状态"></a>查看线程状态</h3><p>thread backtrace 简称 bt<br><code>thread backtrace [-c &lt;count&gt;] [-s &lt;frame-index&gt;] [-e &lt;boolean&gt;]</code><br>thread backtrace后面跟的都是命令选项：<br>-c：设置打印堆栈的帧数(frame)<br>-s：设置从哪个帧(frame)开始打印<br>-e：是否显示额外的回溯</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看当前线程信息，* 号表示当前线程</span><br><span class="line">(lldb) thread list</span><br><span class="line">// 查看调用栈</span><br><span class="line">(lldb) bt</span><br><span class="line">(lldb) bt all</span><br><span class="line">// 选择线程2</span><br><span class="line">(lldb) thread select 2</span><br><span class="line">thread info: 输出当前线程的信息</span><br></pre></td></tr></table></figure><h3 id="列出主应用和依赖的动态库"><a href="#列出主应用和依赖的动态库" class="headerlink" title="列出主应用和依赖的动态库"></a>列出主应用和依赖的动态库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lldb) image list</span><br></pre></td></tr></table></figure><p>命令行参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">  lldb -h</span><br><span class="line">  lldb -v [[--] &lt;PROGRAM-ARG-1&gt; [&lt;PROGRAM_ARG-2&gt; ...]]</span><br><span class="line">  lldb -a &lt;arch&gt; -f &lt;filename&gt; [-c &lt;filename&gt;] [-s &lt;filename&gt;] [-o &lt;none&gt;] [-S &lt;filename&gt;] [-O &lt;none&gt;] [-k &lt;none&gt;] [-K &lt;filename&gt;] [-Q] [-b] [-e] [-x] [-X] [-l &lt;script-language&gt;] [-d] [[--] &lt;PROGRAM-ARG-1&gt; [&lt;PROGRAM_ARG-2&gt; ...]]</span><br><span class="line">  lldb -n &lt;process-name&gt; -w [-s &lt;filename&gt;] [-o &lt;none&gt;] [-S &lt;filename&gt;] [-O &lt;none&gt;] [-k &lt;none&gt;] [-K &lt;filename&gt;] [-Q] [-b] [-e] [-x] [-X] [-l &lt;script-language&gt;] [-d]</span><br><span class="line">  lldb -p &lt;pid&gt; [-s &lt;filename&gt;] [-o &lt;none&gt;] [-S &lt;filename&gt;] [-O &lt;none&gt;] [-k &lt;none&gt;] [-K &lt;filename&gt;] [-Q] [-b] [-e] [-x] [-X] [-l &lt;script-language&gt;] [-d]</span><br><span class="line">  lldb -P</span><br><span class="line">  lldb -r [&lt;none&gt;] -R &lt;none&gt;</span><br><span class="line"></span><br><span class="line">       -h</span><br><span class="line">       --help</span><br><span class="line">            Prints out the usage information for the LLDB debugger.</span><br><span class="line"></span><br><span class="line">       -v</span><br><span class="line">       --version</span><br><span class="line">            Prints out the current version number of the LLDB debugger.</span><br><span class="line"></span><br><span class="line">       -a &lt;arch&gt;</span><br><span class="line">       --arch &lt;arch&gt;</span><br><span class="line">            Tells the debugger to use the specified architecture when starting</span><br><span class="line">            and running the program.  &lt;architecture&gt; must be one of the</span><br><span class="line">            architectures for which the program was compiled.</span><br><span class="line"></span><br><span class="line">       -f &lt;filename&gt;</span><br><span class="line">       --file &lt;filename&gt;</span><br><span class="line">            Tells the debugger to use the file &lt;filename&gt; as the program to be</span><br><span class="line">            debugged.</span><br><span class="line"></span><br><span class="line">       -c &lt;filename&gt;</span><br><span class="line">       --core &lt;filename&gt;</span><br><span class="line">            Tells the debugger to use the fullpath to &lt;path&gt; as the core file.</span><br><span class="line"></span><br><span class="line">       -p &lt;pid&gt;</span><br><span class="line">       --attach-pid &lt;pid&gt;</span><br><span class="line">            Tells the debugger to attach to a process with the given pid.</span><br><span class="line"></span><br><span class="line">       -n &lt;process-name&gt;</span><br><span class="line">       --attach-name &lt;process-name&gt;</span><br><span class="line">            Tells the debugger to attach to a process with the given name.</span><br><span class="line"></span><br><span class="line">       -w</span><br><span class="line">       --wait-for</span><br><span class="line">            Tells the debugger to wait for a process with the given pid or name</span><br><span class="line">            to launch before attaching.</span><br><span class="line"></span><br><span class="line">       -s &lt;filename&gt;</span><br><span class="line">       --source &lt;filename&gt;</span><br><span class="line">            Tells the debugger to read in and execute the lldb commands in the</span><br><span class="line">            given file, after any file provided on the command line has been</span><br><span class="line">            loaded.</span><br><span class="line"></span><br><span class="line">       -o</span><br><span class="line">       --one-line</span><br><span class="line">            Tells the debugger to execute this one-line lldb command after any</span><br><span class="line">            file provided on the command line has been loaded.</span><br><span class="line"></span><br><span class="line">       -S &lt;filename&gt;</span><br><span class="line">       --source-before-file &lt;filename&gt;</span><br><span class="line">            Tells the debugger to read in and execute the lldb commands in the</span><br><span class="line">            given file, before any file provided on the command line has been</span><br><span class="line">            loaded.</span><br><span class="line"></span><br><span class="line">       -O</span><br><span class="line">       --one-line-before-file</span><br><span class="line">            Tells the debugger to execute this one-line lldb command before any</span><br><span class="line">            file provided on the command line has been loaded.</span><br><span class="line"></span><br><span class="line">       -k</span><br><span class="line">       --one-line-on-crash</span><br><span class="line">            When in batch mode, tells the debugger to execute this one-line</span><br><span class="line">            lldb command if the target crashes.</span><br><span class="line"></span><br><span class="line">       -K &lt;filename&gt;</span><br><span class="line">       --source-on-crash &lt;filename&gt;</span><br><span class="line">            When in batch mode, tells the debugger to source this file of lldb</span><br><span class="line">            commands if the target crashes.</span><br><span class="line"></span><br><span class="line">       -Q</span><br><span class="line">       --source-quietly</span><br><span class="line">            Tells the debugger to execute this one-line lldb command before any</span><br><span class="line">            file provided on the command line has been loaded.</span><br><span class="line"></span><br><span class="line">       -b</span><br><span class="line">       --batch</span><br><span class="line">            Tells the debugger to running the commands from -s, -S, -o &amp; -O,</span><br><span class="line">            and then quit.  However if any run command stopped due to a signal</span><br><span class="line">            or crash, the debugger will return to the interactive prompt at the</span><br><span class="line">            place of the crash.</span><br><span class="line"></span><br><span class="line">       -e</span><br><span class="line">       --editor</span><br><span class="line">            Tells the debugger to open source files using the host&#x27;s &quot;external</span><br><span class="line">            editor&quot; mechanism.</span><br><span class="line"></span><br><span class="line">       -x</span><br><span class="line">       --no-lldbinit</span><br><span class="line">            Do not automatically parse any &#x27;.lldbinit&#x27; files.</span><br><span class="line"></span><br><span class="line">       -X</span><br><span class="line">       --no-use-colors</span><br><span class="line">            Do not use colors.</span><br><span class="line"></span><br><span class="line">       -P</span><br><span class="line">       --python-path</span><br><span class="line">            Prints out the path to the lldb.py file for this version of lldb.</span><br><span class="line"></span><br><span class="line">       -l &lt;script-language&gt;</span><br><span class="line">       --script-language &lt;script-language&gt;</span><br><span class="line">            Tells the debugger to use the specified scripting language for</span><br><span class="line">            user-defined scripts, rather than the default.  Valid scripting</span><br><span class="line">            languages that can be specified include Python, Perl, Ruby and Tcl.</span><br><span class="line">            Currently only the Python extensions have been implemented.</span><br><span class="line"></span><br><span class="line">       -d</span><br><span class="line">       --debug</span><br><span class="line">            Tells the debugger to print out extra information for debugging</span><br><span class="line">            itself.</span><br><span class="line"></span><br><span class="line">       -r</span><br><span class="line">       --repl</span><br><span class="line">            Runs lldb in REPL mode with a stub process.</span><br><span class="line"></span><br><span class="line">       -R</span><br><span class="line">       --repl-language</span><br><span class="line">            Chooses the language for the REPL.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Notes:</span><br><span class="line"></span><br><span class="line">       Multiple &quot;-s&quot; and &quot;-o&quot; options can be provided.  They will be processed</span><br><span class="line">       from left to right in order, with the source files and commands</span><br><span class="line">       interleaved.  The same is true of the &quot;-S&quot; and &quot;-O&quot; options.  The before</span><br><span class="line">       file and after file sets can intermixed freely, the command parser will</span><br><span class="line">       sort them out.  The order of the file specifiers (&quot;-c&quot;, &quot;-f&quot;, etc.) is</span><br><span class="line">       not significant in this regard.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       If you don&#x27;t provide -f then the first argument will be the file to be</span><br><span class="line">       debugged which means that &#x27;lldb -- &lt;filename&gt; [&lt;ARG1&gt; [&lt;ARG2&gt;]]&#x27; also</span><br><span class="line">       works.  But remember to end the options with &quot;--&quot; if any of your</span><br><span class="line">       arguments have a &quot;-&quot; in them.</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;ubuntu 16.04 安装 LLDB&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install LLDB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果提示缺少 six 包，需要使用 python 安装一下&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// install pip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python get-pip.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install six&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://zhengjun.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="blockchain" scheme="http://zhengjun.top/tags/blockchain/"/>
    
    <category term="bitcoin" scheme="http://zhengjun.top/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>bitcoin学习rpc部分</title>
    <link href="http://zhengjun.top/2021/12/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE/bitcoin/bitcoin-rpc%E9%83%A8%E5%88%86/"/>
    <id>http://zhengjun.top/2021/12/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE/bitcoin/bitcoin-rpc%E9%83%A8%E5%88%86/</id>
    <published>2021-12-11T12:59:46.863Z</published>
    <updated>2021-12-11T14:02:27.175Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jsonrpc.org/specification_v1">JSON-RPC</a><br><a href="https://bitcoin.org/en/developer-reference#rpc-quick-reference">RPC引用</a></p><p>涉及到的主要的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">httprpc.h</span><br><span class="line">rawtransaction.cpp</span><br><span class="line">validation.h</span><br></pre></td></tr></table></figure><p>字节序列为大端表示<br>举例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; bitcoin-cli getblock</span><br><span class="line">&lt; 000000000000000082ccf8f1557c5d40b21edabb18d2d691cfbf87118bac7254</span><br><span class="line"></span><br><span class="line">显示的 hash 值如下</span><br><span class="line">5472ac8b1187bfcf91d6d218bbda1eb2405d7c55f1f8cc820000000000000000</span><br></pre></td></tr></table></figure><span id="more"></span><p>RPC 服务用来支持管理，钱包，查询（网路，区块数据）<br>如果使用 <code>bitcoin-qt</code> 默认 RPC 服务是关闭的。可以在配置文件 <code>bitcoin.conf</code> 中设置 <code>server=1</code><br>或者启动时添加参数 <code>-server</code><br>如果使用 <code>bitcoind</code> 默认 RPC 服务是开启的。<br>使用 RPC 服务需要认证，通过 <code>rpcuser</code>，<code>rpcpassword</code> 提供。<br><code>bitcoin-cli</code> 是客户端命令行工具用来访问 RPC 服务</p><p>RPC 服务监听端口mainnet <code>8332</code>， testnet,regtest mode <code>18332</code>，只支持 <code>POST</code> 操作<br>可以使用 <code>rpcport</code> 设置，默认监听本地端口，外部不能访问<br>使用 HTTP basic authentication 认证。 <code>Content-Type=text/plain</code>， <code>Content-Length</code> 设置为请求体长度<br>遵循 JSON-RPC 规范，</p><p>下面是目前了解到的所有命令。总共 101 个命令</p><h1 id="新增命令"><a href="#新增命令" class="headerlink" title="新增命令"></a>新增命令</h1><p><a href="https://bitcore.io/guides/bitcoin/">参考</a></p><h2 id="searchrawtransactions"><a href="#searchrawtransactions" class="headerlink" title="searchrawtransactions"></a>searchrawtransactions</h2><p>新增命令，通过地址获取所有的 UTXOs</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tyler@ubuntu16:~/Documents/primecoin-core-desktop-src$ ./src/primecoin-cli -rpcuser=user -rpcpassword=password searchrawtransactions AVAiurQjh4CsxsHoqfPzQxAF3tCU7jFNL7</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;txid&quot;: &quot;a0dd0f30ae94e194221cfb27aee74d983c60d18062a9777b26cacfbfaef2b55e&quot;,</span><br><span class="line">    &quot;hash&quot;: &quot;a0dd0f30ae94e194221cfb27aee74d983c60d18062a9777b26cacfbfaef2b55e&quot;,</span><br><span class="line">    &quot;version&quot;: 1,</span><br><span class="line">    &quot;size&quot;: 108,</span><br><span class="line">    &quot;vsize&quot;: 108,</span><br><span class="line">    &quot;locktime&quot;: 0,</span><br><span class="line">    &quot;vin&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;coinbase&quot;: &quot;02cd0d010400062f503253482f&quot;,</span><br><span class="line">        &quot;sequence&quot;: 4294967295</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;vout&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;value&quot;: 19.02000000,</span><br><span class="line">        &quot;n&quot;: 0,</span><br><span class="line">        &quot;scriptPubKey&quot;: &#123;</span><br><span class="line">          &quot;asm&quot;: &quot;02fa5626eeab2fe38de0e6af08d720108459420c43aadfcd2d8eb20bdb3146261e OP_CHECKSIG&quot;,</span><br><span class="line">          &quot;hex&quot;: &quot;2102fa5626eeab2fe38de0e6af08d720108459420c43aadfcd2d8eb20bdb3146261eac&quot;,</span><br><span class="line">          &quot;reqSigs&quot;: 1,</span><br><span class="line">          &quot;type&quot;: &quot;pubkey&quot;,</span><br><span class="line">          &quot;addresses&quot;: [</span><br><span class="line">            &quot;AVAiurQjh4CsxsHoqfPzQxAF3tCU7jFNL7&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;hex&quot;: &quot;01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0d02cd0d010400062f503253482fffffffff0180375e7100000000232102fa5626eeab2fe38de0e6af08d720108459420c43aadfcd2d8eb20bdb3146261eac00000000&quot;,</span><br><span class="line">    &quot;blockhash&quot;: &quot;0f0f1b6a376027421fd3ccbc142192750c06f8403bb155d8f5fc95cb49aaa1a3&quot;,</span><br><span class="line">    &quot;confirmations&quot;: 2769364,</span><br><span class="line">    &quot;time&quot;: 1373347816,</span><br><span class="line">    &quot;blocktime&quot;: 1373347816</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl --user user:password --data-binary &#x27;&#123;&quot;jsonrpc&quot;:&quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;:&quot;searchrawtransactions&quot;,&quot;params&quot;:[&quot;ATyjPcDsQgHgCjX5mi1U3xgrKp36QRiWVj&quot;]&#125;&#x27; -H &#x27;content-type: text/plain;&#x27; http://103.84.87.82:9912/</span><br></pre></td></tr></table></figure><h2 id="getaddressbalance"><a href="#getaddressbalance" class="headerlink" title="getaddressbalance"></a>getaddressbalance</h2><p>Requires Config: addressindex=1<br>从已确认交易中查询一个或多个地址的余额，返回单位是 satoshis<br>下面是 PrimeCoin 地址<br>AUwoythQxMwt9qW32fcBvoAC716kg4mtGm<br>ANqptFgMreMPaWkDtduUtL4pCb4TD44rdD<br>AHmMUftyK8d6TNcExDmj9JPFxNNobGCgZZ</p><p>AUwoythQxMwt9qW32fcBvoAC716kg4mtGm 的 txid<br>2ba413e793f565715a0fc29a96d46c2ebc61788644b6b17e1f7ac835c96c2c41</p><p>AajqvJzE7yAiNucm1Rvrcju8rKNG3s8XQu 的 txid<br>2ba413e793f565715a0fc29a96d46c2ebc61788644b6b17e1f7ac835c96c2c41</p><p>ATyjPcDsQgHgCjX5mi1U3xgrKp36QRiWVj 的 txid<br>62d0db870af1a15aa4109ccb92737ea8735a5fa9eac6e46a5ba2b75dd356264a</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bitcoin-cli getaddressbalance &#x27;&#123;&quot;addresses&quot;: [&quot;12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX&quot;]&#125;&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;balance&quot;: 25527936,</span><br><span class="line">  &quot;received&quot;: 25527936</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：received 是接收到的资产，包括从同一个地址收到的找零</p><p>使用 http 访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl --user user:password --data-binary &#x27;&#123;&quot;jsonrpc&quot;:&quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;:&quot;getaddressbalance&quot;,&quot;params&quot;:[&quot;&#123;\&quot;addresses\&quot;:[\&quot;AaigSgLkYT638VT7DswGGzLszUXdDexo4b\&quot;,\&quot;AaigSgLkYT638VT7DswGGzLszUXdDexo4b\&quot;]&#125;&quot;]&#125;&#x27; -H &#x27;content-type: text/plain;&#x27; http://127.0.0.1:9912/</span><br></pre></td></tr></table></figure><p>调试指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r -printtoconsole -rpcuser=user -rpcpassword=password -txindex=1 -addrindex=1</span><br><span class="line"></span><br><span class="line">./src/primecoin-cli -rpcuser=user -rpcpassword=password getaddressbalance  &#x27;&#123;&quot;addresses&quot;: [&quot;12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="getaddresstxids"><a href="#getaddresstxids" class="headerlink" title="getaddresstxids"></a>getaddresstxids</h2><p>Requires Config: addressindex=1<br>搜索涉及到一个或多个地址的 txids，按照块排序，最近的块在最下面。只包括确认的交易，可以指定块的高度范围。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@szftest:/home/user# ./src/primecoin-cli -rpcuser=user -rpcpassword=password getaddresstxids &#x27;&#123;&quot;addresses&quot;: [&quot;12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX&quot;], &quot;start&quot;: 220151, &quot;end&quot;: 320261&#125;&#x27;</span><br><span class="line">[</span><br><span class="line">  &quot;fd87f9adebb17f4ebb1673da76ff48ad29e64b7afa02fda0f2c14e43d220fe24&quot;,</span><br><span class="line">  &quot;36ebe0ca3237002acb12e1474a3859bde0ac84b419ec4ae373e63363ebef731c&quot;,</span><br><span class="line">  &quot;d658ab87cc053b8dbcfd4aa2717fd23cc3edfe90ec75351fadd6a0f7993b461d&quot;,</span><br><span class="line">  &quot;ffd901679de65d4398de90cefe68d2c3ef073c41f7e8dbec2fb5cd75fe71dfe7&quot;,</span><br><span class="line">  &quot;a66dddd42f9f2491d3c336ce5527d45cc5c2163aaed3158f81dc054447f447a2&quot;,</span><br><span class="line">  &quot;065ef6b1463f552f675622a5d1fd2c08d6324b4402049f68e767a719e2049e8d&quot;,</span><br><span class="line">  &quot;cea36d008badf5c7866894b191d3239de9582d89b6b452b596f1f1b76347f8cb&quot;,</span><br><span class="line">  &quot;a3a6f902a51a2cbebede144e48a88c05e608c2cce28024041a5b9874013a1e2a&quot;,</span><br><span class="line">  &quot;24087a08309ea5796ef139e65f13ce10db1e4465057b665b9d5102a640aac6be&quot;,</span><br><span class="line">  &quot;91b21c74b6b9cc168fc9a079d0aadf4acc90706196a7278cd674611a9104122e&quot;,</span><br><span class="line">  &quot;1b0235867691784492804fce22a18c2337c97d58a1c63fc275fe26137596d671&quot;,</span><br><span class="line">  &quot;7f66c5e6a8bb4b9e640dfcb097232c740a43481dc02817959f48c48d3436b583&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="getaddressutxos"><a href="#getaddressutxos" class="headerlink" title="getaddressutxos"></a>getaddressutxos</h2><p>Requires Config: addressindex=1<br>返回一个或多个地址的未消费输出，只包括已确认交易，按照区块高度排序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~$ bitcoin-cli getaddressutxos &#x27;&#123;&quot;addresses&quot;: [&quot;12cbQLTFMXRnSzktFkuoG3eHoMeFtpTu3S&quot;]&#125;&#x27;</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;address&quot;: &quot;12cbQLTFMXRnSzktFkuoG3eHoMeFtpTu3S&quot;,</span><br><span class="line">    &quot;txid&quot;: &quot;1554a02d4eb1c7a73e3736922ed99530e360784e709896c42e5756e65b2da341&quot;,</span><br><span class="line">    &quot;outputIndex&quot;: 2,</span><br><span class="line">    &quot;script&quot;: &quot;76a91411b366edfc0a8b66feebae5c2e25a7b6a5d1cf3188ac&quot;,</span><br><span class="line">    &quot;satoshis&quot;: 1,</span><br><span class="line">    &quot;height&quot;: 220151</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;address&quot;: &quot;12cbQLTFMXRnSzktFkuoG3eHoMeFtpTu3S&quot;,</span><br><span class="line">    &quot;txid&quot;: &quot;20fb69a94413637cb50f65e473f91d2599a04d5a0bf9bf6a5e9e843df2710ea4&quot;,</span><br><span class="line">    &quot;outputIndex&quot;: 0,</span><br><span class="line">    &quot;script&quot;: &quot;76a91411b366edfc0a8b66feebae5c2e25a7b6a5d1cf3188ac&quot;,</span><br><span class="line">    &quot;satoshis&quot;: 30000,</span><br><span class="line">    &quot;height&quot;: 228208</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">curl --user myusername --data-binary &#x27;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getaddressutxos&quot;, &quot;params&quot;: [&#123;&quot;addresses&quot;: [&quot;Pb7FLL3DyaAVP2eGfRiEkj4U8ZJ3RHLY9g&quot;]&#125;] &#125;&#x27; -H &#x27;content-type: text/plain;&#x27; http://127.0.0.1:51935/</span><br></pre></td></tr></table></figure><h1 id="Block-Chain-RPCs-20-个"><a href="#Block-Chain-RPCs-20-个" class="headerlink" title="Block Chain RPCs 20 个"></a>Block Chain RPCs 20 个</h1><h2 id="GetBestBlockHash"><a href="#GetBestBlockHash" class="headerlink" title="GetBestBlockHash"></a>GetBestBlockHash</h2><p>主链的最近一个区块的 header hash</p><h2 id="GetBlock"><a href="#GetBlock" class="headerlink" title="GetBlock"></a>GetBlock</h2><p>通过 header hash 获取区块 0.13.0 更新</p><h2 id="GetBlockChainInfo"><a href="#GetBlockChainInfo" class="headerlink" title="GetBlockChainInfo"></a>GetBlockChainInfo</h2><p>当前区块链的信息</p><h2 id="GetBlockCount"><a href="#GetBlockCount" class="headerlink" title="GetBlockCount"></a>GetBlockCount</h2><p>主链的区块数量</p><h2 id="GetBlockHash"><a href="#GetBlockHash" class="headerlink" title="GetBlockHash"></a>GetBlockHash</h2><p>返回主链指定高度的 header hash</p><h2 id="GetBlockHeader"><a href="#GetBlockHeader" class="headerlink" title="GetBlockHeader"></a>GetBlockHeader</h2><p>通过指定的 header hash 获取区块头 0.12.0 新增</p><h2 id="GetChainTips"><a href="#GetChainTips" class="headerlink" title="GetChainTips"></a>GetChainTips</h2><p>返回每个本地区块链的最高区块信息</p><h2 id="GetDifficulty"><a href="#GetDifficulty" class="headerlink" title="GetDifficulty"></a>GetDifficulty</h2><p>返回 POW 的难度值，是最小难度的倍数</p><h2 id="GetMemPoolAncestors"><a href="#GetMemPoolAncestors" class="headerlink" title="GetMemPoolAncestors"></a>GetMemPoolAncestors</h2><p>返回 mempool 中的一个交易的所有在 mempool 的祖先 0.13.0 新增</p><h2 id="GetMemPoolDescendants"><a href="#GetMemPoolDescendants" class="headerlink" title="GetMemPoolDescendants"></a>GetMemPoolDescendants</h2><p>返回 mempool 中的一个交易的所有在 mempool 的后代 0.13.0 新增</p><h2 id="GetMemPoolEntry"><a href="#GetMemPoolEntry" class="headerlink" title="GetMemPoolEntry"></a>GetMemPoolEntry</h2><p>返回指定交易的 mempool data 0.13.0 新增</p><h2 id="GetMemPoolInfo"><a href="#GetMemPoolInfo" class="headerlink" title="GetMemPoolInfo"></a>GetMemPoolInfo</h2><p>返回节点当前交易 memory pool 的信息 0.12.0 更新</p><h2 id="GetRawMemPool"><a href="#GetRawMemPool" class="headerlink" title="GetRawMemPool"></a>GetRawMemPool</h2><p>返回所有 memory pool 中的交易标识 TXIDs 0.13.0 更新</p><h2 id="GetTxOut"><a href="#GetTxOut" class="headerlink" title="GetTxOut"></a>GetTxOut</h2><p>返回一笔交易输出的详细信息，只有 UTXOs 是保证存在的。</p><h2 id="GetTxOutProof"><a href="#GetTxOutProof" class="headerlink" title="GetTxOutProof"></a>GetTxOutProof</h2><p>返回一个区块中的一个或多个指定交易的 16 进制格式的证明信息</p><h2 id="GetTxOutSetInfo"><a href="#GetTxOutSetInfo" class="headerlink" title="GetTxOutSetInfo"></a>GetTxOutSetInfo</h2><p>返回已确认的 UTXO 集合的统计数据</p><h2 id="PreciousBlock"><a href="#PreciousBlock" class="headerlink" title="PreciousBlock"></a>PreciousBlock</h2><p>标识在同一网络中，比其他先接收的区块 0.14.0 新增</p><h2 id="PruneBlockChain"><a href="#PruneBlockChain" class="headerlink" title="PruneBlockChain"></a>PruneBlockChain</h2><p>按照指定的高度或时间戳来修建区块链 0.14.0 新增</p><h2 id="VerifyChain"><a href="#VerifyChain" class="headerlink" title="VerifyChain"></a>VerifyChain</h2><p>校验每个本地链的入口</p><h2 id="VerifyTxOutProof"><a href="#VerifyTxOutProof" class="headerlink" title="VerifyTxOutProof"></a>VerifyTxOutProof</h2><p>验证指向的区块中的一笔或多笔交易的工作证明，成功返回交易信息，如果不在主链返回 RPC 错误 0.11.0 新增</p><h1 id="Control-RPCs-3-个-过期-1-个"><a href="#Control-RPCs-3-个-过期-1-个" class="headerlink" title="Control RPCs 3 个 过期 1 个"></a>Control RPCs 3 个 过期 1 个</h1><h2 id="GetInfo-过期"><a href="#GetInfo-过期" class="headerlink" title="GetInfo 过期"></a>GetInfo 过期</h2><p>打印节点和网络的相关信息</p><h2 id="Help"><a href="#Help" class="headerlink" title="Help"></a>Help</h2><p>列出所有的 RPC 命令，或者指定 RPC 命令的相关帮助信息</p><h2 id="Stop"><a href="#Stop" class="headerlink" title="Stop"></a>Stop</h2><p>安全停止服务</p><h1 id="Generating-RPCs-2-个"><a href="#Generating-RPCs-2-个" class="headerlink" title="Generating RPCs 2 个"></a>Generating RPCs 2 个</h1><h2 id="Generate"><a href="#Generate" class="headerlink" title="Generate"></a>Generate</h2><p>立即生成一个区块  0.11.0 新增, 0.13.0 更新</p><h2 id="GenerateToAddress"><a href="#GenerateToAddress" class="headerlink" title="GenerateToAddress"></a>GenerateToAddress</h2><p>立即挖一个区块到指定地址 0.13.0 新增</p><h1 id="Mining-RPCs-5-个"><a href="#Mining-RPCs-5-个" class="headerlink" title="Mining RPCs 5 个"></a>Mining RPCs 5 个</h1><h2 id="GetBlockTemplate"><a href="#GetBlockTemplate" class="headerlink" title="GetBlockTemplate"></a>GetBlockTemplate</h2><p>获取一个区块模板给挖矿软件使用</p><h2 id="GetMiningInfo"><a href="#GetMiningInfo" class="headerlink" title="GetMiningInfo"></a>GetMiningInfo</h2><p>返回挖矿相关的信息 0.14.0 更新</p><h2 id="GetNetworkHashPS"><a href="#GetNetworkHashPS" class="headerlink" title="GetNetworkHashPS"></a>GetNetworkHashPS</h2><p>根据最后的区块信息估算当前或历史的每秒产生区块数</p><h2 id="PrioritiseTransaction"><a href="#PrioritiseTransaction" class="headerlink" title="PrioritiseTransaction"></a>PrioritiseTransaction</h2><p>向一笔交易增加虚拟的优先级或手续费，使交易以较低的优先级或手续费进入刚挖出的区块</p><h2 id="SubmitBlock"><a href="#SubmitBlock" class="headerlink" title="SubmitBlock"></a>SubmitBlock</h2><p>接收一个区块，验证有效，并转发</p><h1 id="Network-RPCs-12-个"><a href="#Network-RPCs-12-个" class="headerlink" title="Network RPCs 12 个"></a>Network RPCs 12 个</h1><h2 id="AddNode"><a href="#AddNode" class="headerlink" title="AddNode"></a>AddNode</h2><p>从 addnode 列表中增加或删除一个节点，或者尝试连接一个节点一次。 0.14.0 更新</p><h2 id="ClearBanned"><a href="#ClearBanned" class="headerlink" title="ClearBanned"></a>ClearBanned</h2><p>清除禁止节点列表 0.12.0 新增</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bitcoin-cli -rpcuser=user -rpcpassword=password clearbanned</span><br><span class="line"></span><br><span class="line">curl --user myusername --data-binary &#x27;&#123;&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;clearbanned&quot;, &quot;params&quot;: [] &#125;&#x27; -H &#x27;content-type: text/plain;&#x27; http://127.0.0.1:8332/</span><br></pre></td></tr></table></figure><h2 id="DisconnectNode"><a href="#DisconnectNode" class="headerlink" title="DisconnectNode"></a>DisconnectNode</h2><p>立即从指定节点断开 0.12.0 新增</p><h2 id="GetAddedNodeInfo"><a href="#GetAddedNodeInfo" class="headerlink" title="GetAddedNodeInfo"></a>GetAddedNodeInfo</h2><p>返回添加节点或所有添加节点的信息 0.14.0 更新<br>只有手动使用 RPC 命令 <code>addnode</code> 添加的节点，才会有相关信息</p><h2 id="GetConnectionCount"><a href="#GetConnectionCount" class="headerlink" title="GetConnectionCount"></a>GetConnectionCount</h2><p>返回连接其他节点的数量</p><h2 id="GetNetTotals"><a href="#GetNetTotals" class="headerlink" title="GetNetTotals"></a>GetNetTotals</h2><p>返回网络流量的相关信息，包括输入字节，输出字节和时间 0.12.0 更新</p><h2 id="GetNetworkInfo"><a href="#GetNetworkInfo" class="headerlink" title="GetNetworkInfo"></a>GetNetworkInfo</h2><p>返回节点连接网络的相关信息 0.13.0 更新</p><h2 id="GetPeerInfo"><a href="#GetPeerInfo" class="headerlink" title="GetPeerInfo"></a>GetPeerInfo</h2><p>返回每个连接的网络节点的信息 0.13.0 更新</p><h2 id="ListBanned"><a href="#ListBanned" class="headerlink" title="ListBanned"></a>ListBanned</h2><p>列出所有禁止的 IPs/Subnets 0.12.0 新增</p><h2 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h2><p>发送一个 P2P ping 消息给所有节点，测试延迟，结果由 <code>getpeerinfo</code> RPC 命令的 <code>pingtime</code> 和 <code>pingwait</code> 提供<br>单位是 10 进制的秒。<br>ping 命令和其他命令一样进入队列处理，所以反应的是处理延迟，不是网络 ping</p><h2 id="SetBan"><a href="#SetBan" class="headerlink" title="SetBan"></a>SetBan</h2><p>从禁止列表中添加或删除 IP/Subnet 0.12.0</p><h2 id="SetNetworkActive"><a href="#SetNetworkActive" class="headerlink" title="SetNetworkActive"></a>SetNetworkActive</h2><p>禁止，启用所有的 P2P 网络 0.14.0 新增</p><h1 id="Raw-Transaction-RPCs-7-个"><a href="#Raw-Transaction-RPCs-7-个" class="headerlink" title="Raw Transaction RPCs 7 个"></a>Raw Transaction RPCs 7 个</h1><h2 id="CreateRawTransaction"><a href="#CreateRawTransaction" class="headerlink" title="CreateRawTransaction"></a>CreateRawTransaction</h2><p>创建一个未签名的序列化交易</p><h2 id="FundRawTransaction"><a href="#FundRawTransaction" class="headerlink" title="FundRawTransaction"></a>FundRawTransaction</h2><p>增加输入到交易中直到满足输出数量</p><h2 id="DecodeRawTransaction"><a href="#DecodeRawTransaction" class="headerlink" title="DecodeRawTransaction"></a>DecodeRawTransaction</h2><p>解码 16 进制数据到 json 格式</p><h2 id="DecodeScript"><a href="#DecodeScript" class="headerlink" title="DecodeScript"></a>DecodeScript</h2><p>解码一个 16 进制的 P2SH 赎回脚本</p><h2 id="GetRawTransaction"><a href="#GetRawTransaction" class="headerlink" title="GetRawTransaction"></a>GetRawTransaction</h2><p>获取一个 16 进制的序列化交易或者 json 对象格式的交易</p><h2 id="SendRawTransaction"><a href="#SendRawTransaction" class="headerlink" title="SendRawTransaction"></a>SendRawTransaction</h2><p>验证交易并广播到网络</p><h2 id="SignRawTransaction"><a href="#SignRawTransaction" class="headerlink" title="SignRawTransaction"></a>SignRawTransaction</h2><p>使用钱包中的私钥对序列化交易做签名</p><h1 id="Utility-RPCs-6-个"><a href="#Utility-RPCs-6-个" class="headerlink" title="Utility RPCs 6 个"></a>Utility RPCs 6 个</h1><h2 id="CreateMultiSig"><a href="#CreateMultiSig" class="headerlink" title="CreateMultiSig"></a>CreateMultiSig</h2><p>创建一个 P2SH 的多重签名地址</p><h2 id="EstimateFee"><a href="#EstimateFee" class="headerlink" title="EstimateFee"></a>EstimateFee</h2><p>按KiB估算交易的手续费</p><h2 id="EstimatePriority"><a href="#EstimatePriority" class="headerlink" title="EstimatePriority"></a>EstimatePriority</h2><p>估算免费的高优先级交易 过期</p><h2 id="GetMemoryInfo"><a href="#GetMemoryInfo" class="headerlink" title="GetMemoryInfo"></a>GetMemoryInfo</h2><p>获取使用的内存信息</p><h2 id="ValidateAddress"><a href="#ValidateAddress" class="headerlink" title="ValidateAddress"></a>ValidateAddress</h2><p>返回指定的地址信息</p><h2 id="VerifyMessage"><a href="#VerifyMessage" class="headerlink" title="VerifyMessage"></a>VerifyMessage</h2><p>验证一个签名信息</p><h1 id="Wallet-RPCs-46-个，7个过期的"><a href="#Wallet-RPCs-46-个，7个过期的" class="headerlink" title="Wallet RPCs 46 个，7个过期的"></a>Wallet RPCs 46 个，7个过期的</h1><h2 id="AbandonTransaction"><a href="#AbandonTransaction" class="headerlink" title="AbandonTransaction"></a>AbandonTransaction</h2><p>作废交易</p><h2 id="AddWitnessAddress"><a href="#AddWitnessAddress" class="headerlink" title="AddWitnessAddress"></a>AddWitnessAddress</h2><p>为脚本添加一个证人地址</p><h2 id="AddMultiSigAddress"><a href="#AddMultiSigAddress" class="headerlink" title="AddMultiSigAddress"></a>AddMultiSigAddress</h2><p>添加一个多重签名地址</p><h2 id="BackupWallet"><a href="#BackupWallet" class="headerlink" title="BackupWallet"></a>BackupWallet</h2><p>备份 <code>wallet.dat</code> 到指定路径</p><h2 id="BumpFee"><a href="#BumpFee" class="headerlink" title="BumpFee"></a>BumpFee</h2><p>使用一笔新的更高手续费的交易替换已签名 RBF 的未确认钱包交易</p><h2 id="DumpPrivKey"><a href="#DumpPrivKey" class="headerlink" title="DumpPrivKey"></a>DumpPrivKey</h2><p>返回对应地址的 wallet-import-format (WIP) 私钥</p><h2 id="DumpWallet"><a href="#DumpWallet" class="headerlink" title="DumpWallet"></a>DumpWallet</h2><p>使用用户可读的格式创建或重写钱包的秘钥</p><h2 id="EncryptWallet"><a href="#EncryptWallet" class="headerlink" title="EncryptWallet"></a>EncryptWallet</h2><p>使用密码加密钱包</p><h2 id="GetAccountAddress"><a href="#GetAccountAddress" class="headerlink" title="GetAccountAddress"></a>GetAccountAddress</h2><p>返回账户对应的 bitcoin 地址</p><h2 id="GetAccount"><a href="#GetAccount" class="headerlink" title="GetAccount"></a>GetAccount</h2><p>返回指定地址的账户名称</p><h2 id="GetAddressesByAccount-过期"><a href="#GetAddressesByAccount-过期" class="headerlink" title="GetAddressesByAccount 过期"></a>GetAddressesByAccount 过期</h2><p>返回指定账户的地址列表</p><h2 id="GetBalance"><a href="#GetBalance" class="headerlink" title="GetBalance"></a>GetBalance</h2><p>使用十进制表示的所有账户或者指定账户的余额</p><h2 id="GetNewAddress"><a href="#GetNewAddress" class="headerlink" title="GetNewAddress"></a>GetNewAddress</h2><p>返回一个新的地址</p><h2 id="GetRawChangeAddress"><a href="#GetRawChangeAddress" class="headerlink" title="GetRawChangeAddress"></a>GetRawChangeAddress</h2><p>返回一个新的地址用来接收找零</p><h2 id="GetReceivedByAccount-过期"><a href="#GetReceivedByAccount-过期" class="headerlink" title="GetReceivedByAccount 过期"></a>GetReceivedByAccount 过期</h2><p>返回交易中指定确认数的指定账户的地址接收的总额，不包括 coinbase 交易</p><h2 id="GetReceivedByAddress"><a href="#GetReceivedByAddress" class="headerlink" title="GetReceivedByAddress"></a>GetReceivedByAddress</h2><p>返回交易中指定确认数的指定地址接收的总额，不包括 coinbase 交易</p><h2 id="GetTransaction"><a href="#GetTransaction" class="headerlink" title="GetTransaction"></a>GetTransaction</h2><p>获取钱包内交易的详细信息 0.12.0 更新</p><h2 id="GetUnconfirmedBalance"><a href="#GetUnconfirmedBalance" class="headerlink" title="GetUnconfirmedBalance"></a>GetUnconfirmedBalance</h2><p>返回钱包的全部余额</p><h2 id="GetWalletInfo"><a href="#GetWalletInfo" class="headerlink" title="GetWalletInfo"></a>GetWalletInfo</h2><p>提供钱包相关的信息</p><h2 id="ImportAddress"><a href="#ImportAddress" class="headerlink" title="ImportAddress"></a>ImportAddress</h2><p>添加地址或公钥脚本到钱包，不关联私钥，可以用来查看相关交易</p><h2 id="ImportMulti"><a href="#ImportMulti" class="headerlink" title="ImportMulti"></a>ImportMulti</h2><p>导入多个地址或脚本</p><h2 id="ImportPrunedFunds"><a href="#ImportPrunedFunds" class="headerlink" title="ImportPrunedFunds"></a>ImportPrunedFunds</h2><p>对于修剪后的钱包，不需要重新扫描就可以导入资金</p><h2 id="ImportPrivKey"><a href="#ImportPrivKey" class="headerlink" title="ImportPrivKey"></a>ImportPrivKey</h2><p>添加私钥到钱包</p><h2 id="ImportWallet"><a href="#ImportWallet" class="headerlink" title="ImportWallet"></a>ImportWallet</h2><p>从钱包 dump 文件格式中导入私钥</p><h2 id="KeyPoolRefill"><a href="#KeyPoolRefill" class="headerlink" title="KeyPoolRefill"></a>KeyPoolRefill</h2><p>填充未使用的预生成的秘钥的缓冲区</p><h2 id="ListAccounts-过期"><a href="#ListAccounts-过期" class="headerlink" title="ListAccounts 过期"></a>ListAccounts 过期</h2><p>列出账户和余额</p><h2 id="ListAddressGroupings"><a href="#ListAddressGroupings" class="headerlink" title="ListAddressGroupings"></a>ListAddressGroupings</h2><p>列出一组在相同交易中做为公开输入的有共同所有权的地址，或者从前一个作为找零用途的账户</p><h2 id="ListLockUnspent"><a href="#ListLockUnspent" class="headerlink" title="ListLockUnspent"></a>ListLockUnspent</h2><p>返回一组暂时无法消费的 outputs 列表</p><h2 id="ListReceivedByAccount-过期"><a href="#ListReceivedByAccount-过期" class="headerlink" title="ListReceivedByAccount 过期"></a>ListReceivedByAccount 过期</h2><p>列出每个账户收到的总额</p><h2 id="ListReceivedByAddress"><a href="#ListReceivedByAddress" class="headerlink" title="ListReceivedByAddress"></a>ListReceivedByAddress</h2><p>列出每一个地址收到的总额</p><h2 id="ListSinceBlock"><a href="#ListSinceBlock" class="headerlink" title="ListSinceBlock"></a>ListSinceBlock</h2><p>返回从指定块，加上指定深度区块的 header hash 之后涉及到钱包的所有交易</p><h2 id="ListTransactions-0-12-1-更新"><a href="#ListTransactions-0-12-1-更新" class="headerlink" title="ListTransactions 0.12.1 更新"></a>ListTransactions 0.12.1 更新</h2><p>列出涉及钱包的最近的交易</p><h2 id="ListUnspent"><a href="#ListUnspent" class="headerlink" title="ListUnspent"></a>ListUnspent</h2><p>列出属于钱包的 UTXO 数组 0.13.0 更新</p><h2 id="LockUnspent"><a href="#LockUnspent" class="headerlink" title="LockUnspent"></a>LockUnspent</h2><p>临时锁定或解锁指定的 outputs，被锁定的 outputs 在交易时不会被自动收集。</p><h2 id="Move-过期"><a href="#Move-过期" class="headerlink" title="Move 过期"></a>Move 过期</h2><p>使用 off-block-chain 交易，在钱包内的账户间移动指定金额</p><h2 id="RemovePrunedFunds-0-13-0-新加"><a href="#RemovePrunedFunds-0-13-0-新加" class="headerlink" title="RemovePrunedFunds 0.13.0 新加"></a>RemovePrunedFunds 0.13.0 新加</h2><p>从钱包删除指定的交易</p><h2 id="SendFrom-过期"><a href="#SendFrom-过期" class="headerlink" title="SendFrom 过期"></a>SendFrom 过期</h2><p>从本地账户消费到指定地址</p><h2 id="SendMany"><a href="#SendMany" class="headerlink" title="SendMany"></a>SendMany</h2><p>创建和广播一笔发送 outputs 到多个账户的交易</p><h2 id="SendToAddress"><a href="#SendToAddress" class="headerlink" title="SendToAddress"></a>SendToAddress</h2><p>消费到指定地址</p><h2 id="SetAccount-过期"><a href="#SetAccount-过期" class="headerlink" title="SetAccount 过期"></a>SetAccount 过期</h2><p>把指定地址放到给出的账户中</p><h2 id="SetTxFee"><a href="#SetTxFee" class="headerlink" title="SetTxFee"></a>SetTxFee</h2><p>设置本钱包创建的交易的手续费单位 /kb</p><h2 id="SignMessage"><a href="#SignMessage" class="headerlink" title="SignMessage"></a>SignMessage</h2><p>使用一个地址的私钥对消息签名</p><h2 id="SignMessageWithPrivKey-0-13-0-新增"><a href="#SignMessageWithPrivKey-0-13-0-新增" class="headerlink" title="SignMessageWithPrivKey 0.13.0 新增"></a>SignMessageWithPrivKey 0.13.0 新增</h2><p>使用输入的私钥对消息签名</p><h2 id="WalletLock"><a href="#WalletLock" class="headerlink" title="WalletLock"></a>WalletLock</h2><p>从内存移除钱包的加密密钥，锁定钱包。<br>执行完该命令后，在调用任何需要解锁钱包的功能之前，需要再次调用 <code>walletpassphrase</code></p><h2 id="WalletPassphrase"><a href="#WalletPassphrase" class="headerlink" title="WalletPassphrase"></a>WalletPassphrase</h2><p>按照输入的时间（秒），保存钱包的解锁密钥到内存中，重复发送该命令，可以设置新的时间</p><h2 id="WalletPassphraseChange"><a href="#WalletPassphraseChange" class="headerlink" title="WalletPassphraseChange"></a>WalletPassphraseChange</h2><p>设置新的钱包密码</p><h1 id="Removed-RPCs"><a href="#Removed-RPCs" class="headerlink" title="Removed RPCs"></a>Removed RPCs</h1><ul><li>GetGenerate: was removed in Bitcoin Core 0.13.0.</li><li>GetHashesPerSec: was removed in Bitcoin Core 0.11.0.</li><li>GetWork: was removed in Bitcoin Core 0.10.0.</li><li>SetGenerate: was removed in Bitcoin Core 0.13.0.</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.jsonrpc.org/specification_v1&quot;&gt;JSON-RPC&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://bitcoin.org/en/developer-reference#rpc-quick-reference&quot;&gt;RPC引用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;涉及到的主要的文件&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;httprpc.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rawtransaction.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;validation.h&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;字节序列为大端表示&lt;br&gt;举例：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; bitcoin-cli getblock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; 000000000000000082ccf8f1557c5d40b21edabb18d2d691cfbf87118bac7254&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;显示的 hash 值如下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5472ac8b1187bfcf91d6d218bbda1eb2405d7c55f1f8cc820000000000000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://zhengjun.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="blockchain" scheme="http://zhengjun.top/tags/blockchain/"/>
    
    <category term="bitcoin" scheme="http://zhengjun.top/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>levelDB接触</title>
    <link href="http://zhengjun.top/2021/12/11/%E5%8A%9F%E8%83%BD%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%BA%93/levelDB%E6%8E%A5%E8%A7%A6/"/>
    <id>http://zhengjun.top/2021/12/11/%E5%8A%9F%E8%83%BD%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%BA%93/levelDB%E6%8E%A5%E8%A7%A6/</id>
    <published>2021-12-11T12:59:44.687Z</published>
    <updated>2021-12-11T14:03:01.728Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://draveness.me/bigtable-leveldb">参考</a><br><a href="http://leveldb.org/">官网</a><br><a href="https://github.com/hxoht/ldb">cli工具</a><br><a href="https://github.com/syndtr/goleveldb">go impl</a></p><h2 id="leveldb是什么"><a href="#leveldb是什么" class="headerlink" title="leveldb是什么"></a>leveldb是什么</h2><p>一个单机的 Key,Value 数据库，适合写多读少，支持持久化，支持故障恢复，支持二进制数据<br>LevelDb是能够处理十亿级别规模Key-Value型数据持久性存储的C++ 程序库<br>官方网站报道其随机写性能达到40万条记录每秒，而随机读性能达到6万条记录每秒。<br>总体来说，LevelDb的写操作要大大快于读操作，而顺序读写操作则大大快于随机读写操作。</p><p>样例接口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class DB &#123;</span><br><span class="line"> public:</span><br><span class="line">  virtual Status Put(const WriteOptions&amp; options, const Slice&amp; key, const Slice&amp; value) = 0;</span><br><span class="line">  virtual Status Delete(const WriteOptions&amp; options, const Slice&amp; key) = 0;</span><br><span class="line">  virtual Status Write(const WriteOptions&amp; options, WriteBatch* updates) = 0;</span><br><span class="line">  virtual Status Get(const ReadOptions&amp; options, const Slice&amp; key, std::string* value) = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>记录几个概念，有需要在深入了解</p><ol><li>memtable</li><li>Imuable memtable（其实我跟1是亲兄弟啦）</li><li>sstable</li><li>log</li><li>filter</li></ol><p>CLI 命令<br>打开目录，如果没有就创建</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ldb ./testdb --create</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ldb -h</span><br><span class="line">get</span><br><span class="line">put</span><br><span class="line">del</span><br><span class="line">列出key</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><h2 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h2><img alt="60a2861e.png" src="/2021/12/11/%E5%8A%9F%E8%83%BD%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%BA%93/levelDB%E6%8E%A5%E8%A7%A6/60a2861e.png" width height><h2 id="put-操作"><a href="#put-操作" class="headerlink" title="put 操作"></a>put 操作</h2><img alt="6d3bbdc0.png" src="/2021/12/11/%E5%8A%9F%E8%83%BD%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%BA%93/levelDB%E6%8E%A5%E8%A7%A6/6d3bbdc0.png" width height><h2 id="log-格式"><a href="#log-格式" class="headerlink" title="log 格式"></a>log 格式</h2><img alt="82a2155f.png" src="/2021/12/11/%E5%8A%9F%E8%83%BD%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%BA%93/levelDB%E6%8E%A5%E8%A7%A6/82a2155f.png" width height><h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><img alt="67ac73ac.png" src="/2021/12/11/%E5%8A%9F%E8%83%BD%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%BA%93/levelDB%E6%8E%A5%E8%A7%A6/67ac73ac.png" width height>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://draveness.me/bigtable-leveldb&quot;&gt;参考&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://leveldb.org/&quot;&gt;官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/hxoht/ldb&quot;&gt;cli工具&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/syndtr/goleveldb&quot;&gt;go impl&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;leveldb是什么&quot;&gt;&lt;a href=&quot;#leveldb是什么&quot; class=&quot;headerlink&quot; title=&quot;leveldb是什么&quot;&gt;&lt;/a&gt;leveldb是什么&lt;/h2&gt;&lt;p&gt;一个单机的 Key,Value 数据库，适合写多读少，支持持久化，支持故障恢复，支持二进制数据&lt;br&gt;LevelDb是能够处理十亿级别规模Key-Value型数据持久性存储的C++ 程序库&lt;br&gt;官方网站报道其随机写性能达到40万条记录每秒，而随机读性能达到6万条记录每秒。&lt;br&gt;总体来说，LevelDb的写操作要大大快于读操作，而顺序读写操作则大大快于随机读写操作。&lt;/p&gt;
&lt;p&gt;样例接口&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class DB &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  virtual Status Put(const WriteOptions&amp;amp; options, const Slice&amp;amp; key, const Slice&amp;amp; value) = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  virtual Status Delete(const WriteOptions&amp;amp; options, const Slice&amp;amp; key) = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  virtual Status Write(const WriteOptions&amp;amp; options, WriteBatch* updates) = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  virtual Status Get(const ReadOptions&amp;amp; options, const Slice&amp;amp; key, std::string* value) = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://zhengjun.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>英语基础语法-09副词</title>
    <link href="http://zhengjun.top/2021/12/11/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E8%8B%B1%E8%AF%AD%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-09%E5%89%AF%E8%AF%8D/"/>
    <id>http://zhengjun.top/2021/12/11/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E8%8B%B1%E8%AF%AD%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-09%E5%89%AF%E8%AF%8D/</id>
    <published>2021-12-11T12:58:22.747Z</published>
    <updated>2018-07-22T01:56:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>副词Adverbes用来修饰动词，形容词或其他的副词。与形容词修饰名词类似。<br>修饰表示增加或修改一个词的含义。<br>副词告诉我们一个动作是如何发生的。例如：where, when or how it occurs。副词会让我们的演讲和写作更加有趣，更加精确，更加有价值。  </p><p>很多的副词都以’ly’结尾。<br>貌似副词的功能很多的说，需要重点掌握一下。  </p><span id="more"></span><p>简单的介绍一下种类，这里不细说。似乎有点吓人，这货简直无处不在。对于这样的词类一定要重点关照。  </p><ul><li>时间副词：now, then, soon, ago, recently, lately; An idea $\underline{suddenly}$ struck me.我心中忽然产生一个念头</li><li>地点副词：here, there, up, down, away, nearby, home;I am considering going $\underline{abroad}$.我正在考虑出国。</li><li>方式副词：quietly, heavily, warmly, carefully, happily;Look at the picture $\underline{carefully}$.仔细看这幅画</li><li>频度副词：always, usually, often, frequently, constantly, occasionally;Sometimes he gets up $\underline{early}$.他有时起得早</li><li>程度副词：fairly, pretty, rather, quite, very, much, too;The film was $\underline{quite}$ good.这个电影不错</li><li>焦点副词：就是通过强调使之成为人们注意的焦点的副词only, alone, also, even, just, merely, simply;$\underline{Only}$ Tom knows the answer.只有汤姆知道答案</li><li>连接副词：这类副词有相当于并列连词的therefore, besides, otherwise, however, moreover, furthermore;I don’t want to go out now, and $\underline{besides}$, I must work.我现在不想出去，而且我还得工作</li><li>关系副词：就是引导定语从句的when, where, why等；e.g. This is the factory where his father works.</li><li>疑问副词：就是用于引出特殊疑问句的when, where, why, how等；e.g. When will he be back?</li><li>句子副词：就是修饰整个句子，表达说话人的观点态度的副词，常见的有frankly, honestly, clearly, obviously, evidently；e.g. Frankly, I am not satisfied with your work.</li></ul><h2 id="副词可以为动词提供更多的信息。"><a href="#副词可以为动词提供更多的信息。" class="headerlink" title="副词可以为动词提供更多的信息。"></a>副词可以为动词提供更多的信息。</h2><ul><li>The fire engine runs $\underline{fast}$.</li><li>Listen to his speech $\underline{carefully}$.</li><li>I browse the web $\underline{frequently}$.</li><li>It rained $\underline{hard}$.</li></ul><h2 id="副词可以为形容词提供更多的信息"><a href="#副词可以为形容词提供更多的信息" class="headerlink" title="副词可以为形容词提供更多的信息"></a>副词可以为形容词提供更多的信息</h2><ul><li>The news is $\underline{very surprising}$!</li><li>The coffee is $\underline{extremely}$ hot, so be careful.</li><li>Nature is $\underline{really}$ amazing!</li></ul><h2 id="副词可以为其他副词提供更多的信息"><a href="#副词可以为其他副词提供更多的信息" class="headerlink" title="副词可以为其他副词提供更多的信息"></a>副词可以为其他副词提供更多的信息</h2><ul><li>It rains $\underline{very hard}$.</li><li>Computers run $\underline{much faster}$ these days.</li><li>I clean my room $\underline{less frequently}$ because I am busy.</li></ul><h2 id="通常形容词可以通过在尾部追加’ly’变成副词。"><a href="#通常形容词可以通过在尾部追加’ly’变成副词。" class="headerlink" title="通常形容词可以通过在尾部追加’ly’变成副词。"></a>通常形容词可以通过在尾部追加’ly’变成副词。</h2><ul><li>slow – slowly</li><li>quick – quickly</li><li>comfortable – comfortably</li><li>loud – loudly</li><li>clear – clearly</li></ul><p>对于以’y’结尾的形容词，把’y’变成’i’然后在添加’ly’</p><ul><li>happy – happily</li><li>easy – easily</li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>选择正确的单词形式  </p><ol><li>I spoke to you (careful, carefully) last time.  </li><li>We talked about it (clear, clearly).  </li><li>I sat on the (comfortable, comfortably) sofa.  </li><li>My dog runs very (fast, faster).  </li><li>Let’s install the new program (quick, quickly).  </li></ol><p>答案：  </p><ol><li>carefully  </li><li>clearly  </li><li>comfortable  </li><li>fast  </li><li>quickly  </li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;副词Adverbes用来修饰动词，形容词或其他的副词。与形容词修饰名词类似。&lt;br&gt;修饰表示增加或修改一个词的含义。&lt;br&gt;副词告诉我们一个动作是如何发生的。例如：where, when or how it occurs。副词会让我们的演讲和写作更加有趣，更加精确，更加有价值。  &lt;/p&gt;
&lt;p&gt;很多的副词都以’ly’结尾。&lt;br&gt;貌似副词的功能很多的说，需要重点掌握一下。  &lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://zhengjun.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="英语" scheme="http://zhengjun.top/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>hexo的使用</title>
    <link href="http://zhengjun.top/2021/12/10/%E5%B7%A5%E5%85%B7%E7%B1%BB/hexo/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://zhengjun.top/2021/12/10/%E5%B7%A5%E5%85%B7%E7%B1%BB/hexo/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-10T05:37:21.000Z</published>
    <updated>2021-12-22T01:41:27.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-插件"><a href="#hexo-插件" class="headerlink" title="hexo 插件"></a>hexo 插件</h2><h3 id="next-主题"><a href="#next-主题" class="headerlink" title="next 主题"></a>next 主题</h3><p>新版的 8.8  提供了另一种安装方式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在网站根目录 blog 下面执行</span></span><br><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure><h3 id="github-部署"><a href="#github-部署" class="headerlink" title="github 部署"></a>github 部署</h3><p>安装下面插件，配置完成后，还需要做些配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网站配置文件</span></span><br><span class="line"><span class="attr">deploy</span>:</span><br><span class="line">- type: git</span><br><span class="line">  <span class="attr">repo</span>: git@github.com:MeZhengJun/MeZhengJun.github.io.git</span><br><span class="line">  <span class="attr">branch</span>: master</span><br><span class="line">  <span class="attr">name</span>: MeZhengJun</span><br><span class="line">  <span class="attr">email</span>: aslucky1977@gmail.com</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="阅读时间和字数"><a href="#阅读时间和字数" class="headerlink" title="阅读时间和字数"></a>阅读时间和字数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br><span class="line">npm i hexo-wordcount --save</span><br><span class="line"></span><br><span class="line"><span class="attr">symbols_count_time</span>:</span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">symbols</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">time</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl</span>: <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm</span>: <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix</span>: <span class="string">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure><h3 id="在顶部增加一个阅读进度条"><a href="#在顶部增加一个阅读进度条" class="headerlink" title="在顶部增加一个阅读进度条"></a>在顶部增加一个阅读进度条</h3><p><a href="https://github.com/theme-next/theme-next-reading-progress">reading_progress</a></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># Reading progress bar</span><br><span class="line"><span class="attr">reading_progress</span>:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  # Available values: top | bottom</span><br><span class="line">  <span class="attr">position</span>: top</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;#6666FF&quot;</span></span><br><span class="line">  <span class="attr">height</span>: 3px</span><br></pre></td></tr></table></figure><h3 id="阅读进度百分比"><a href="#阅读进度百分比" class="headerlink" title="阅读进度百分比"></a>阅读进度百分比</h3><p><a href="https://github.com/HubSpot/pace">pace</a></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pace:</span><br><span class="line">    enable: <span class="literal">true</span></span><br><span class="line">    # Themes list:</span><br><span class="line">    # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br><span class="line">    # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br><span class="line">    <span class="attr">theme</span>: minimal</span><br></pre></td></tr></table></figure><h3 id="评论插件"><a href="#评论插件" class="headerlink" title="评论插件"></a>评论插件</h3><p>为 Next 主题添加 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 支持</p><h3 id="next-8-添加代码折叠"><a href="#next-8-添加代码折叠" class="headerlink" title="next 8 添加代码折叠"></a>next 8 添加代码折叠</h3><p>添加code-unfold.js<br>由于是在next主题中添加js逻辑，所以我们把code-unfold.js放置在了themes/next/source/js/code-unfold.js：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> CODE_MAX_HEIGHT = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> containers = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开</span></span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.js_unfold_code_btn&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="built_in">this</span>).closest(<span class="string">&#x27;.js_highlight_container&#x27;</span>).addClass(<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 收起</span></span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.js_retract_code_btn&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $container = $(<span class="built_in">this</span>).closest(<span class="string">&#x27;.js_highlight_container&#x27;</span>).removeClass(<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> winTop = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">  <span class="keyword">var</span> offsetTop = $container.offset().top;</span><br><span class="line">  $(<span class="built_in">this</span>).css(<span class="string">&#x27;top&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (winTop &gt; offsetTop) &#123;</span><br><span class="line">    <span class="comment">// 设置滚动条位置</span></span><br><span class="line">    $(<span class="string">&#x27;body, html&#x27;</span>).animate(&#123;</span><br><span class="line">      <span class="attr">scrollTop</span>: $container.offset().top - CODE_MAX_HEIGHT</span><br><span class="line">    &#125;, <span class="number">600</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 滚动事件，触发动画效果</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">&#x27;scroll&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scrollTop = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">  <span class="keyword">var</span> temp = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; containers.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = containers[i];</span><br><span class="line">    <span class="keyword">var</span> &#123; $container, height, $hide, hasHorizontalScrollbar &#125; = item;</span><br><span class="line">    <span class="keyword">if</span> ($container.closest(<span class="string">&#x27;body&#x27;</span>).length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果 $container 元素已经不在页面上, 则删除该元素</span></span><br><span class="line">      <span class="comment">// 防止pjax页面跳转之后，元素未删除</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp.push(item);</span><br><span class="line">    <span class="keyword">if</span> (!$container.hasClass(<span class="string">&#x27;on&#x27;</span>)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> offsetTop = $container.offset().top;</span><br><span class="line">    <span class="keyword">var</span> hideBtnHeight = $hide.outerHeight();</span><br><span class="line">    <span class="comment">// 减去按钮高度，减去底部滚动条高度</span></span><br><span class="line">    <span class="keyword">var</span> maxTop = <span class="built_in">parseInt</span>(height - (hasHorizontalScrollbar ? <span class="number">17</span> : <span class="number">0</span>) - hideBtnHeight);</span><br><span class="line">    <span class="keyword">let</span> top = <span class="built_in">parseInt</span>(</span><br><span class="line">      <span class="built_in">Math</span>.min(</span><br><span class="line">        <span class="built_in">Math</span>.max(scrollTop - offsetTop, <span class="number">0</span>), <span class="comment">// 如果小于 0 ，则取 0</span></span><br><span class="line">        maxTop,<span class="comment">// 如果大于 height ，则取 height</span></span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 根据 sin 曲线设置&quot;收起代码&quot;位置</span></span><br><span class="line">    <span class="keyword">var</span> halfHeight = <span class="built_in">parseInt</span>($(<span class="built_in">window</span>).height() / <span class="number">2</span> * <span class="built_in">Math</span>.sin((top / maxTop) * <span class="number">90</span> * (<span class="number">2</span> * <span class="built_in">Math</span>.PI/<span class="number">360</span>)));</span><br><span class="line">    $hide.css(<span class="string">&#x27;top&#x27;</span>, <span class="built_in">Math</span>.min(top + halfHeight, maxTop));</span><br><span class="line">  &#125;</span><br><span class="line">  containers = temp;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加隐藏容器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCodeWrap</span>(<span class="params">$node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $container = $node.wrap(<span class="string">&#x27;&lt;div class=&quot;js_highlight_container highlight-container&quot;&gt;&lt;div class=&quot;highlight-wrap&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>).closest(<span class="string">&#x27;.js_highlight_container&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 底部 &quot;展开代码&quot; 与 侧边栏 &quot;收起代码&quot;</span></span><br><span class="line">  <span class="keyword">var</span> $btn = $(<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;highlight-footer&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;a class=&quot;js_unfold_code_btn show-btn&quot; href=&quot;javascript:;&quot;&gt;展开代码&lt;i class=&quot;fa fa-angle-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;a class=&quot;js_retract_code_btn hide-btn&quot; href=&quot;javascript:;&quot;&gt;&lt;i class=&quot;fa fa-angle-up&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;收起代码&lt;/a&gt;</span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line"></span><br><span class="line">  $container.append($btn);</span><br><span class="line">  <span class="keyword">return</span> $container;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">codeUnfold</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;.highlight&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 防止重复渲染</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.__render__ === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.__render__ = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> $this = $(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">var</span> height = $(<span class="built_in">this</span>).outerHeight();</span><br><span class="line">    <span class="keyword">if</span> (height &gt; CODE_MAX_HEIGHT) &#123;</span><br><span class="line">      <span class="comment">// 添加展开&amp;收起容器</span></span><br><span class="line">      <span class="keyword">var</span> $container = addCodeWrap($this, height);</span><br><span class="line">      containers.push(&#123;</span><br><span class="line">        $container,</span><br><span class="line">        height,</span><br><span class="line">        <span class="attr">$hide</span>: $container.find(<span class="string">&#x27;.js_retract_code_btn&#x27;</span>),</span><br><span class="line">        <span class="attr">hasHorizontalScrollbar</span>: <span class="built_in">this</span>.scrollWidth &gt; <span class="built_in">this</span>.offsetWidth,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>引用code-unfold.js<br>修改文件themes/next/layout/_scripts/index.njk</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在最后添加</span></span><br><span class="line">&#123;&#123;- next_js(<span class="string">&#x27;code-unfold.js&#x27;</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><p>下面找到文件themes/next/source/js/next-boot.js：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">NexT.boot.refresh = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 添加一行代码</span></span><br><span class="line">  codeUnfold()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>创建highlight.styl<br>可以添加theme/next/source/css/_common/components/highlight.styl文件：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 展开收起效果</span></span><br><span class="line">.highlight-container</span><br><span class="line">  <span class="attr">position</span>: relative</span><br><span class="line">  background-color: highlight-background</span><br><span class="line">  &amp;.on</span><br><span class="line">    .highlight-footer</span><br><span class="line">      <span class="attr">display</span>: none</span><br><span class="line">    .hide-btn</span><br><span class="line">      <span class="attr">display</span>: flex</span><br><span class="line">    .highlight-wrap</span><br><span class="line">      max-height: none</span><br><span class="line">  .highlight-wrap</span><br><span class="line">    <span class="attr">overflow</span>: hidden</span><br><span class="line">    max-height: 200px</span><br><span class="line">  .highlight-footer</span><br><span class="line">    position absolute</span><br><span class="line">    <span class="attr">width</span>: <span class="number">100</span>%</span><br><span class="line">    left: <span class="number">0</span></span><br><span class="line">    <span class="attr">bottom</span>: <span class="number">0</span></span><br><span class="line">    <span class="attr">height</span>: 60px</span><br><span class="line">    background-image: <span class="string">&#x27;linear-gradient(-180deg, rgba(255,255,255,0) 0%, %s 65%)&#x27;</span> % highlight-background;</span><br><span class="line">    text-align: center</span><br><span class="line">  .show-btn</span><br><span class="line">    font-size: 12px</span><br><span class="line">    <span class="attr">color</span>: #fff</span><br><span class="line">    <span class="attr">position</span>: absolute</span><br><span class="line">    <span class="attr">left</span>: <span class="number">50</span>%</span><br><span class="line">    transform: translateX(-<span class="number">50</span>%)</span><br><span class="line">    <span class="attr">bottom</span>: <span class="number">0</span></span><br><span class="line">    line-height: 2em</span><br><span class="line">    text-decoration: none</span><br><span class="line">    <span class="attr">padding</span>: <span class="number">0</span> <span class="number">0.</span>8em</span><br><span class="line">    text-align: center</span><br><span class="line">    border-radius: 4px 4px <span class="number">0</span></span><br><span class="line">    &amp;:hover</span><br><span class="line">      text-decoration: none</span><br><span class="line">  .hide-btn</span><br><span class="line">    <span class="attr">color</span>: #fff</span><br><span class="line">    font-size: 12px</span><br><span class="line">    <span class="attr">width</span>: 22px</span><br><span class="line">    <span class="attr">position</span>: absolute</span><br><span class="line">    <span class="attr">left</span>: -21px</span><br><span class="line">    <span class="attr">top</span>: <span class="number">0</span></span><br><span class="line">    line-height: 1em</span><br><span class="line">    text-decoration: none</span><br><span class="line">    text-align: center</span><br><span class="line">    <span class="attr">display</span>: none</span><br><span class="line">    flex-direction: column</span><br><span class="line">    background-color: highlight-background</span><br><span class="line">    border-radius: 4px <span class="number">0</span> <span class="number">0</span> 4px</span><br><span class="line">    <span class="attr">padding</span>: <span class="number">0.</span>1em <span class="number">0</span> <span class="number">0.</span>6em</span><br><span class="line">    <span class="attr">transition</span>: top ease <span class="number">0.</span>35s</span><br><span class="line">  .fa-angle-up,</span><br><span class="line">  .fa-angle-down</span><br><span class="line">    font-style: normal</span><br><span class="line">    <span class="attr">color</span>: #fff</span><br><span class="line">  .fa-angle-up:before</span><br><span class="line">    <span class="attr">content</span>:<span class="string">&quot;\f106&quot;</span></span><br><span class="line">  .fa-angle-down:before</span><br><span class="line">    <span class="attr">content</span>:<span class="string">&quot;\f107&quot;</span></span><br><span class="line">    margin-left: <span class="number">0.</span>5em</span><br><span class="line">  .js_unfold_code_btn, .js_retract_code_btn</span><br><span class="line">    <span class="attr">background</span>: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)</span><br><span class="line">    border-bottom: none !important</span><br><span class="line">    &amp;:hover</span><br><span class="line">      border-bottom-color: none !important</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>引用样式<br>找到文件themes/next/source/css/_common/components/index.styl：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;post&#x27;</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;pages&#x27;</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;third-party&#x27;</span>;</span><br><span class="line"><span class="comment">// 添加这一行</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;highlight&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="背景及透明化"><a href="#背景及透明化" class="headerlink" title="背景及透明化"></a>背景及透明化</h3><p>把想设置的背景放入./themes/next/source/images中，命名为background.jpg。在根目录的source文件夹下新建文件夹_data与style文件source/_data/styles.styl，输入以下代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line"> <span class="attr">background</span>:url(<span class="regexp">/images/</span>background.jpg);</span><br><span class="line"> background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:<span class="number">100</span>% <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在主题_config.yml文件中找到对应的custom_file_path</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.swig</span><br><span class="line">  #header: source/_data/header.swig</span><br><span class="line">  #sidebar: source/_data/sidebar.swig</span><br><span class="line">  #postMeta: source/_data/post-meta.swig</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.swig</span><br><span class="line">  #footer: source/_data/footer.swig</span><br><span class="line">  #bodyEnd: source/_data/body-end.swig</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  <span class="attr">style</span>: source/_data/styles.styl</span><br></pre></td></tr></table></figure><p>博客内容透明化<br>在上文中新建的style.styl文件中可以使博客内容透明化</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//博客内容透明化</span></span><br><span class="line"><span class="comment">//文章内容的透明度设置</span></span><br><span class="line">.content-wrap &#123;</span><br><span class="line"> <span class="comment">// opacity: 0.8;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-block &#123;</span><br><span class="line"><span class="attr">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>) none repeat scroll !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-header&#123;</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//侧边框的透明度设置</span></span><br><span class="line"><span class="comment">//.sidebar &#123;</span></span><br><span class="line"><span class="comment">//  opacity: 0.8;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">.sidebar-inner &#123;</span><br><span class="line">  <span class="attr">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>) none repeat scroll !important;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">.comments &#123;</span><br><span class="line"><span class="attr">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>) none repeat scroll !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单栏的透明度设置</span></span><br><span class="line">.header-inner &#123;</span><br><span class="line">  <span class="attr">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//搜索框（local-search）的透明度设置</span></span><br><span class="line">.popup &#123;</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;hexo-插件&quot;&gt;&lt;a href=&quot;#hexo-插件&quot; class=&quot;headerlink&quot; title=&quot;hexo 插件&quot;&gt;&lt;/a&gt;hexo 插件&lt;/h2&gt;&lt;h3 id=&quot;next-主题&quot;&gt;&lt;a href=&quot;#next-主题&quot; class=&quot;headerlink&quot; title=&quot;next 主题&quot;&gt;&lt;/a&gt;next 主题&lt;/h3&gt;&lt;p&gt;新版的 8.8  提供了另一种安装方式&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在网站根目录 blog 下面执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-theme-next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;github-部署&quot;&gt;&lt;a href=&quot;#github-部署&quot; class=&quot;headerlink&quot; title=&quot;github 部署&quot;&gt;&lt;/a&gt;github 部署&lt;/h3&gt;&lt;p&gt;安装下面插件，配置完成后，还需要做些配置&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-git --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 网站配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;deploy&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- type: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;repo&lt;/span&gt;: git@github.com:MeZhengJun/MeZhengJun.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;branch&lt;/span&gt;: master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: MeZhengJun&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;email&lt;/span&gt;: aslucky1977@gmail.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>nodejs-相关信息</title>
    <link href="http://zhengjun.top/2021/12/09/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/javascript/Nodejs/nodejs-%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF/"/>
    <id>http://zhengjun.top/2021/12/09/%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/javascript/Nodejs/nodejs-%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF/</id>
    <published>2021-12-09T07:48:58.000Z</published>
    <updated>2021-12-10T04:46:34.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看全局安装路径</span></span><br><span class="line">npm root -g</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看npm的基础设置</span></span><br><span class="line">npm config ls</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看安装目录路径</span></span><br><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="安装卸载"><a href="#安装卸载" class="headerlink" title="安装卸载"></a>安装卸载</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本地安装</span></span><br><span class="line">npm install &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">npm install lodash</span><br><span class="line"><span class="comment">// 在本地目录中如果没有 package.json 这个文件的话，那么最新版本的包会被安装。</span></span><br><span class="line"><span class="comment">// 如果存在 package.json 文件,查找针对这个包所约定的语义化版本规则，然后安装符合此规则的最新版本。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局安装</span></span><br><span class="line">npm install -g &lt;package&gt;</span><br><span class="line"></span><br><span class="line">npm uninstall lodash</span><br></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>项目依赖的包<br>制定版本</p><p>我们在使用 npm install 安装模块的模块的时候 ，一般会使用下面这几种命令形式：</p><p>npm install moduleName<br>安装模块到项目目录下</p><p>npm install -g moduleName<br>-g 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置。</p><p>npm install -save moduleName<br>-save 的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖。</p><p>npm install -save-dev moduleName<br>-save-dev 的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖。</p><p>npm install moduleName 命令</p><p>安装模块到项目node_modules目录下。<br>不会将模块依赖写入devDependencies或dependencies 节点。<br>运行 npm install 初始化项目时不会下载模块。<br>npm install -g moduleName 命令</p><p>安装模块到全局，不会在项目node_modules目录中保存模块包。<br>不会将模块依赖写入devDependencies或dependencies 节点。<br>运行 npm install 初始化项目时不会下载模块。<br>npm install -save moduleName 命令</p><p>安装模块到项目node_modules目录下。<br>会将模块依赖写入dependencies 节点。<br>运行 npm install 初始化项目时，会将模块下载到项目目录下。<br>运行npm install –production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。<br>npm install -save-dev moduleName 命令</p><p>安装模块到项目node_modules目录下。<br>会将模块依赖写入devDependencies 节点。<br>运行 npm install 初始化项目时，会将模块下载到项目目录下。<br>运行npm install –production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。</p><p>devDependencies 节点下的模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 -save-dev 的形式安装。像 express 这些模块是项目运行必备的，应该安装在 dependencies 节点下，所以我们应该使用 -save 的形式安装。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;查看信息&quot;&gt;&lt;a href=&quot;#查看信息&quot; class=&quot;headerlink&quot; title=&quot;查看信息&quot;&gt;&lt;/a&gt;查看信息&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 查看全局安装路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm root -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 查看npm的基础设置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm config ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 查看安装目录路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm config get prefix&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端技术" scheme="http://zhengjun.top/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="nodejs" scheme="http://zhengjun.top/tags/nodejs/"/>
    
  </entry>
  
</feed>
